#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de refatora√ß√£o autom√°tica: executar_tarefa()
Quebra m√©todo de 224 linhas em 6 subm√©todos organizados

ESTRUTURA:
1. _preparar_contexto_tarefa() - Busca contexto de mem√≥ria/workspace
2. _construir_prompt_sistema() - Monta prompt inicial
3. _inicializar_estado_execucao() - Reset de vari√°veis
4. _executar_chamada_api() - Chamada √† API Claude
5. _processar_resposta_final() - Quando stop_reason == "end_turn"
6. _processar_uso_ferramentas() - Quando stop_reason == "tool_use"
"""

import re

def refatorar_executar_tarefa():
    """Refatora o m√©todo executar_tarefa()"""

    # Ler arquivo
    with open('luna_v3_FINAL_OTIMIZADA.py', 'r', encoding='utf-8') as f:
        content = f.read()
        lines = content.splitlines(keepends=True)

    # Encontrar in√≠cio do m√©todo
    metodo_inicio = None
    for i, line in enumerate(lines):
        if 'def executar_tarefa(' in line:
            metodo_inicio = i
            break

    if metodo_inicio is None:
        print("‚ùå Erro: N√£o encontrou m√©todo executar_tarefa")
        return False

    # Encontrar fim do m√©todo (pr√≥ximo def no mesmo n√≠vel)
    metodo_fim = None
    for i in range(metodo_inicio + 1, len(lines)):
        if lines[i].startswith('    def ') and 'executar_tarefa' not in lines[i]:
            metodo_fim = i
            break

    if metodo_fim is None:
        print("‚ùå Erro: N√£o encontrou fim do m√©todo")
        return False

    print(f"üìç M√©todo encontrado: linhas {metodo_inicio+1} at√© {metodo_fim}")
    print(f"   Total: {metodo_fim - metodo_inicio} linhas")

    # Criar backup
    with open('luna_v3_FINAL_OTIMIZADA.py.backup_executar', 'w', encoding='utf-8') as f:
        f.writelines(lines)
    print("üíæ Backup criado: luna_v3_FINAL_OTIMIZADA.py.backup_executar")

    # ========================================================================
    # M√âTODO 1: _preparar_contexto_tarefa
    # ========================================================================

    metodo1 = '''    def _preparar_contexto_tarefa(self, tarefa: str) -> tuple[str, str]:
        """
        Prepara contexto de mem√≥ria e workspace para a tarefa.

        Returns:
            (contexto_aprendizados, contexto_workspace)
        """
        # Buscar contexto de mem√≥ria
        contexto_aprendizados = ""
        if self.sistema_ferramentas.memoria_disponivel:
            contexto_aprendizados = self.sistema_ferramentas.memoria.obter_contexto_recente(3)

        # Contexto de workspace
        contexto_workspace = ""
        if self.sistema_ferramentas.gerenciador_workspaces_disponivel:
            ws_atual = self.sistema_ferramentas.gerenciador_workspaces.get_workspace_atual()
            if ws_atual:
                contexto_workspace = (
                    f"\\n\\nWORKSPACE ATUAL: {ws_atual['nome']}\\n"
                    f"Localiza√ß√£o: {ws_atual['path_relativo']}\\n"
                    f"Novos arquivos ser√£o criados aqui automaticamente!"
                )

        return contexto_aprendizados, contexto_workspace

'''

    # ========================================================================
    # M√âTODO 2: _construir_prompt_sistema
    # ========================================================================

    metodo2 = '''    def _construir_prompt_sistema(
        self,
        tarefa: str,
        contexto_aprendizados: str,
        contexto_workspace: str
    ) -> str:
        """Constr√≥i o prompt do sistema para a tarefa."""
        return f"""Voc√™ √© o AGENTE AI MAIS AVAN√áADO poss√≠vel.

CAPACIDADES COMPLETAS:
1. AUTO-EVOLU√á√ÉO: Cria ferramentas dinamicamente
2. COMPUTER USE: Navega web, screenshots, intera√ß√£o
3. CREDENCIAIS: Acessa cofre criptografado, login autom√°tico
4. MEM√ìRIA PERMANENTE: Aprende e lembra entre sess√µes
5. WORKSPACE MANAGER: Organiza projetos automaticamente
6. RECUPERA√á√ÉO DE ERROS: Detecta e corrige erros automaticamente

INSTRU√á√ïES CR√çTICAS:
1. ANTES de tarefas, BUSQUE aprendizados relevantes
2. DEPOIS de resolver algo novo, SALVE o aprendizado
3. NUNCA mostre senhas ao usu√°rio
4. USE login_automatico sempre que precisar de login
5. APRENDA com erros e sucessos
6. USE workspaces para organizar projetos
7. SE ENCONTRAR ERRO: PARE e CORRIJA antes de continuar!

{contexto_aprendizados}{contexto_workspace}

TAREFA DO USU√ÅRIO:
{tarefa}

Comece BUSCANDO aprendizados relevantes, depois execute a tarefa!"""

'''

    # ========================================================================
    # M√âTODO 3: _inicializar_estado_execucao
    # ========================================================================

    metodo3 = '''    def _inicializar_estado_execucao(self, prompt_sistema: str) -> None:
        """Inicializa o estado da execu√ß√£o."""
        self.historico_conversa = [{"role": "user", "content": prompt_sistema}]
        self.modo_recuperacao = False
        self.erros_recentes = []
        self.tentativas_recuperacao = 0
        self.rate_limit_manager.exibir_status()

'''

    # ========================================================================
    # M√âTODO 4: _executar_chamada_api
    # ========================================================================

    metodo4 = '''    def _executar_chamada_api(self):
        """
        Executa chamada √† API Claude com tratamento de rate limit.

        Returns:
            Response object ou None se houver rate limit
        """
        from anthropic import RateLimitError

        self.rate_limit_manager.aguardar_se_necessario()

        try:
            response = self.client.messages.create(
                model="claude-sonnet-4-5-20250929",
                max_tokens=4096,
                tools=self.sistema_ferramentas.obter_descricoes(),
                messages=self.historico_conversa
            )

            self.rate_limit_manager.registrar_uso(
                response.usage.input_tokens,
                response.usage.output_tokens
            )

            return response

        except RateLimitError:
            print_realtime(f"\\n‚ö†Ô∏è  RATE LIMIT ATINGIDO!")
            print_realtime(f"   Aguardando 60 segundos...")
            time.sleep(60)
            return None

        except Exception as e:
            print_realtime(f"\\n‚ùå Erro: {e}")
            raise

'''

    # ========================================================================
    # M√âTODO 5: _processar_resposta_final
    # ========================================================================

    metodo5 = '''    def _processar_resposta_final(self, response, tarefa: str) -> str:
        """
        Processa resposta final quando stop_reason == "end_turn".

        Returns:
            Texto da resposta final
        """
        resposta_final = ""
        for block in response.content:
            if hasattr(block, "text"):
                resposta_final += block.text

        # Verificar se est√° em modo recupera√ß√£o
        if self.modo_recuperacao:
            print_realtime("\\n‚úÖ Erro resolvido! Voltando √† tarefa principal...")
            self.modo_recuperacao = False
            self.tentativas_recuperacao = 0
            return None  # Continua executando

        # Registrar na mem√≥ria
        if self.sistema_ferramentas.memoria_disponivel:
            ferramentas_usadas: List[str] = []
            self.sistema_ferramentas.memoria.registrar_tarefa(
                tarefa, resposta_final[:500], ferramentas_usadas, True
            )

        # Exibir resultado
        print_realtime("\\n" + "="*70)
        print_realtime("‚úÖ CONCLU√çDO!")
        print_realtime("="*70)
        print_realtime(resposta_final)
        print_realtime("="*70)

        return resposta_final

'''

    # ========================================================================
    # M√âTODO 6: _processar_uso_ferramentas
    # ========================================================================

    metodo6 = '''    def _processar_uso_ferramentas(self, response, tarefa: str, iteracao: int) -> bool:
        """
        Processa uso de ferramentas quando stop_reason == "tool_use".

        Returns:
            True se deve continuar loop, False se deve parar
        """
        self.historico_conversa.append({
            "role": "assistant",
            "content": response.content
        })

        # Extrair pensamento
        pensamento = ""
        for block in response.content:
            if hasattr(block, "text") and block.text:
                pensamento = block.text[:120]
                break

        if pensamento:
            print_realtime(f"üí≠ {pensamento}...")

        # Executar ferramentas
        tool_results = []
        erro_detectado = False
        ultimo_erro = None

        for block in response.content:
            if block.type == "tool_use":
                print_realtime(f"üîß {block.name}")

                resultado = self.sistema_ferramentas.executar(
                    block.name, block.input
                )

                # Detectar erro
                tem_erro, erro_info = self.detectar_erro(resultado)
                if tem_erro:
                    erro_detectado = True
                    ultimo_erro = erro_info
                    print_realtime(f"  ‚ö†Ô∏è  ERRO DETECTADO: {erro_info[:80]}")
                    self.erros_recentes.append({
                        'ferramenta': block.name,
                        'erro': erro_info,
                        'iteracao': iteracao
                    })

                tool_results.append({
                    "type": "tool_result",
                    "tool_use_id": block.id,
                    "content": resultado
                })

        self.historico_conversa.append({
            "role": "user",
            "content": tool_results
        })

        # Sistema de recupera√ß√£o
        if erro_detectado and not self.modo_recuperacao:
            print_realtime(f"\\nüö® ENTRANDO EM MODO DE RECUPERA√á√ÉO DE ERRO")
            self.modo_recuperacao = True
            self.tentativas_recuperacao = 1

            prompt_recuperacao = self.criar_prompt_recuperacao(
                ultimo_erro, tarefa
            )
            self.historico_conversa.append({
                "role": "user",
                "content": prompt_recuperacao
            })

        elif erro_detectado and self.modo_recuperacao:
            self.tentativas_recuperacao += 1
            if self.tentativas_recuperacao >= self.max_tentativas_recuperacao:
                print_realtime(
                    f"\\n‚ö†Ô∏è  Muitas tentativas de recupera√ß√£o "
                    f"({self.tentativas_recuperacao})"
                )
                print_realtime(f"   Continuando com a tarefa mesmo com erro...")
                self.modo_recuperacao = False
                self.tentativas_recuperacao = 0

        return True  # Continua loop

'''

    # ========================================================================
    # M√âTODO PRINCIPAL REFATORADO
    # ========================================================================

    metodo_principal = '''    def executar_tarefa(
        self,
        tarefa: str,
        max_iteracoes: Optional[int] = None
    ) -> Optional[str]:
        """
        Executa uma tarefa completa.

        ‚úÖ REFATORADO: Organizado em subm√©todos para melhor manuten√ß√£o.

        Args:
            tarefa: Descri√ß√£o da tarefa
            max_iteracoes: Limite de itera√ß√µes (padr√£o: 40)

        Returns:
            Resposta final do agente (ou None se n√£o concluir)
        """
        # Configurar max_iteracoes
        if max_iteracoes is None:
            max_iteracoes = self.max_iteracoes_atual
        else:
            self.max_iteracoes_atual = max_iteracoes

        # Header
        print_realtime("\\n" + "="*70)
        print_realtime(f"üéØ TAREFA: {tarefa}")
        print_realtime("="*70)

        # Preparar contexto
        contexto_aprendizados, contexto_workspace = self._preparar_contexto_tarefa(tarefa)

        # Construir prompt
        prompt_sistema = self._construir_prompt_sistema(
            tarefa, contexto_aprendizados, contexto_workspace
        )

        # Inicializar estado
        self._inicializar_estado_execucao(prompt_sistema)

        # Loop principal
        for iteracao in range(1, max_iteracoes + 1):
            modo_tag = "üîß RECUPERA√á√ÉO" if self.modo_recuperacao else f"üîÑ Itera√ß√£o {iteracao}/{max_iteracoes}"
            print_realtime(f"\\n{modo_tag}")

            # Executar API
            response = self._executar_chamada_api()
            if response is None:
                continue  # Rate limit, tentar novamente

            # Processar resposta
            if response.stop_reason == "end_turn":
                resposta_final = self._processar_resposta_final(response, tarefa)
                if resposta_final is not None:
                    # Estat√≠sticas finais
                    self._exibir_estatisticas()
                    return resposta_final
                # Se None, continua loop (estava em modo recupera√ß√£o)

            elif response.stop_reason == "tool_use":
                self._processar_uso_ferramentas(response, tarefa, iteracao)

            # Exibir status periodicamente
            if iteracao % 5 == 0:
                self.rate_limit_manager.exibir_status()

        print_realtime("\\n‚ö†Ô∏è  Limite de itera√ß√µes atingido")
        self._exibir_estatisticas()

        return None

'''

    # ========================================================================
    # RECONSTRUIR ARQUIVO
    # ========================================================================

    # Linhas at√© o m√©todo original
    novas_lines = lines[:metodo_inicio]

    # Adicionar m√©todos auxiliares
    novas_lines.append(metodo1)
    novas_lines.append(metodo2)
    novas_lines.append(metodo3)
    novas_lines.append(metodo4)
    novas_lines.append(metodo5)
    novas_lines.append(metodo6)

    # Adicionar m√©todo principal refatorado
    novas_lines.append(metodo_principal)

    # Adicionar resto do arquivo (ap√≥s o m√©todo original)
    novas_lines.extend(lines[metodo_fim:])

    # Salvar arquivo refatorado
    with open('luna_v3_FINAL_OTIMIZADA.py', 'w', encoding='utf-8') as f:
        f.writelines(novas_lines)

    print(f"\n‚úÖ Refatora√ß√£o completa!")
    print(f"   M√©todo original: {metodo_fim - metodo_inicio} linhas")
    print(f"   M√©todo refatorado: ~60 linhas")
    print(f"   M√©todos auxiliares criados: 6")
    print(f"   Redu√ß√£o: {metodo_fim - metodo_inicio} ‚Üí ~120 linhas total (60 principal + 60 auxiliares)")

    return True

if __name__ == '__main__':
    print("üîß REFATORA√á√ÉO AUTOM√ÅTICA: executar_tarefa()")
    print("=" * 60)

    sucesso = refatorar_executar_tarefa()

    if sucesso:
        print("\nüéâ Sucesso! Execute para validar:")
        print("   python3 -m py_compile luna_v3_FINAL_OTIMIZADA.py")
    else:
        print("\n‚ùå Falha na refatora√ß√£o")
