#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìã TEMPLATES DE WORKSPACES - SISTEMA LUNA V3
===========================================

Define templates predefinidos para diferentes tipos de projetos.
üÜï FASE 2.2: Sistema de templates de workspace

Autor: Sistema Luna V3
Data: 2025-10-19
"""

from typing import Dict, List
from pathlib import Path


class TemplatesWorkspace:
    """
    Gerencia templates predefinidos para workspaces

    Templates dispon√≠veis:
    - automacao_web: Automa√ß√£o com Playwright/Selenium
    - bot: Bot com comandos e handlers
    - analise_dados: An√°lise de dados com Pandas/NumPy
    - webapp: Aplica√ß√£o web (Flask/Django)
    - api: API REST
    - estudo: Material de estudos organizado
    """

    TEMPLATES = {
        "automacao_web": {
            "nome": "Automa√ß√£o Web",
            "descricao": "Projeto de automa√ß√£o web com Playwright",
            "tipo": "automa√ß√£o",
            "tags": ["automa√ß√£o", "web", "scraping"],
            "tech_stack": ["Python", "Playwright"],
            "estrutura": {
                "src/": "C√≥digo fonte principal",
                "tests/": "Testes automatizados",
                "data/": "Dados de entrada/sa√≠da",
                "logs/": "Arquivos de log",
                "screenshots/": "Capturas de tela",
                "config/": "Arquivos de configura√ß√£o"
            },
            "arquivos": {
                "src/main.py": '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script principal de automa√ß√£o
"""

from playwright.sync_api import sync_playwright

def main():
    """Fun√ß√£o principal"""
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()

        # Seu c√≥digo aqui
        page.goto("https://example.com")

        browser.close()

if __name__ == "__main__":
    main()
''',
                "README.md": "# Projeto de Automa√ß√£o Web\\n\\nDescri√ß√£o do projeto.\\n",
                ".gitignore": "*.pyc\\n__pycache__/\\n*.log\\nscreenshots/\\ndata/*.csv\\n",
                "requirements.txt": "playwright\\npython-dotenv\\n"
            }
        },

        "bot": {
            "nome": "Bot",
            "descricao": "Projeto de bot com handlers e comandos",
            "tipo": "bot",
            "tags": ["bot", "automa√ß√£o", "comandos"],
            "tech_stack": ["Python"],
            "estrutura": {
                "bot/": "C√≥digo do bot",
                "bot/handlers/": "Handlers de comandos",
                "bot/utils/": "Utilit√°rios",
                "tests/": "Testes",
                "logs/": "Logs de execu√ß√£o"
            },
            "arquivos": {
                "bot/main.py": '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bot principal
"""

def main():
    """Inicia o bot"""
    print("Bot iniciado!")
    # Seu c√≥digo aqui

if __name__ == "__main__":
    main()
''',
                "README.md": "# Bot\\n\\nDescri√ß√£o do bot.\\n",
                ".gitignore": "*.pyc\\n__pycache__/\\n*.log\\n.env\\n"
            }
        },

        "analise_dados": {
            "nome": "An√°lise de Dados",
            "descricao": "Projeto de an√°lise de dados com Pandas",
            "tipo": "an√°lise",
            "tags": ["dados", "an√°lise", "visualiza√ß√£o"],
            "tech_stack": ["Python", "Pandas", "NumPy"],
            "estrutura": {
                "notebooks/": "Jupyter notebooks",
                "data/raw/": "Dados brutos",
                "data/processed/": "Dados processados",
                "scripts/": "Scripts de processamento",
                "reports/": "Relat√≥rios gerados",
                "visualizations/": "Gr√°ficos e visualiza√ß√µes"
            },
            "arquivos": {
                "notebooks/exploracao.ipynb": "",  # Notebook vazio
                "scripts/processar_dados.py": '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de processamento de dados
"""

import pandas as pd

def processar_dados(arquivo_entrada):
    """Processa dados do arquivo"""
    df = pd.read_csv(arquivo_entrada)
    # Seu c√≥digo aqui
    return df

if __name__ == "__main__":
    processar_dados("data/raw/dados.csv")
''',
                "README.md": "# An√°lise de Dados\\n\\nDescri√ß√£o da an√°lise.\\n",
                "requirements.txt": "pandas\\nnumpy\\nmatplotlib\\njupyter\\n"
            }
        },

        "webapp": {
            "nome": "Web App",
            "descricao": "Aplica√ß√£o web com Flask",
            "tipo": "webapp",
            "tags": ["web", "flask", "api"],
            "tech_stack": ["Python", "Flask", "HTML"],
            "estrutura": {
                "app/": "C√≥digo da aplica√ß√£o",
                "app/templates/": "Templates HTML",
                "app/static/": "CSS, JS, imagens",
                "app/routes/": "Rotas da aplica√ß√£o",
                "tests/": "Testes",
                "config/": "Configura√ß√µes"
            },
            "arquivos": {
                "app/__init__.py": "",
                "app/main.py": '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Aplica√ß√£o Flask
"""

from flask import Flask

app = Flask(__name__)

@app.route("/")
def home():
    return "Hello World!"

if __name__ == "__main__":
    app.run(debug=True)
''',
                "README.md": "# Web App\\n\\nAplica√ß√£o web com Flask.\\n",
                "requirements.txt": "flask\\n"
            }
        },

        "estudo": {
            "nome": "Estudo",
            "descricao": "Material de estudos organizado",
            "tipo": "estudo",
            "tags": ["estudo", "aprendizado", "notas"],
            "tech_stack": ["Markdown"],
            "estrutura": {
                "notas/": "Anota√ß√µes e resumos",
                "exercicios/": "Exerc√≠cios pr√°ticos",
                "projetos/": "Projetos de pr√°tica",
                "recursos/": "PDFs, v√≠deos, links"
            },
            "arquivos": {
                "README.md": "# Material de Estudo\\n\\n## T√≥picos\\n\\n## Recursos\\n\\n## Progresso\\n",
                "notas/introducao.md": "# Introdu√ß√£o\\n\\nNotas de estudo.\\n"
            }
        }
    }

    @classmethod
    def listar_templates(cls) -> List[Dict]:
        """
        Lista todos os templates dispon√≠veis

        Returns:
            Lista de dicion√°rios com info dos templates
        """
        return [
            {
                "id": template_id,
                "nome": info["nome"],
                "descricao": info["descricao"],
                "tipo": info["tipo"],
                "tags": info["tags"]
            }
            for template_id, info in cls.TEMPLATES.items()
        ]

    @classmethod
    def obter_template(cls, template_id: str) -> Dict:
        """
        Obt√©m template espec√≠fico

        Args:
            template_id: ID do template

        Returns:
            Dicion√°rio com info completa do template
        """
        return cls.TEMPLATES.get(template_id, {})

    @classmethod
    def aplicar_template(cls, workspace_path: Path, template_id: str) -> bool:
        """
        Aplica template ao workspace

        Args:
            workspace_path: Caminho do workspace
            template_id: ID do template

        Returns:
            True se sucesso, False caso contr√°rio
        """
        template = cls.obter_template(template_id)
        if not template:
            return False

        try:
            # Criar estrutura de pastas
            for pasta, descricao in template.get("estrutura", {}).items():
                pasta_path = workspace_path / pasta
                pasta_path.mkdir(parents=True, exist_ok=True)

                # Criar README na pasta explicando
                readme = pasta_path / ".info.txt"
                readme.write_text(descricao, encoding='utf-8')

            # Criar arquivos predefinidos
            for arquivo, conteudo in template.get("arquivos", {}).items():
                arquivo_path = workspace_path / arquivo
                arquivo_path.parent.mkdir(parents=True, exist_ok=True)

                # N√£o sobrescrever se j√° existe
                if not arquivo_path.exists():
                    arquivo_path.write_text(conteudo, encoding='utf-8')

            return True

        except Exception as e:
            print(f"Erro ao aplicar template: {e}")
            return False


# ============================================================================
# EXEMPLO DE USO
# ============================================================================

if __name__ == "__main__":
    print("üìã Templates Dispon√≠veis:")
    print("=" * 70)

    for template in TemplatesWorkspace.listar_templates():
        print(f"\nüè∑Ô∏è  {template['id']}: {template['nome']}")
        print(f"   Descri√ß√£o: {template['descricao']}")
        print(f"   Tipo: {template['tipo']}")
        print(f"   Tags: {', '.join(template['tags'])}")
