#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste do sistema de decomposi√ß√£o de tarefas
Verifica se o limite de itera√ß√µes est√° em 50
"""

import os
from dotenv import load_dotenv
from agente_completo_final import AgenteCompletoFinal

load_dotenv()

def testar_limite_iteracoes():
    """Testa com tarefa complexa para verificar limite"""
    
    print("="*70)
    print("üß™ TESTE DO LIMITE DE ITERA√á√ïES (deve ser 50)")
    print("="*70)
    
    # Tarefa complexa que vai decompor em v√°rias etapas
    tarefa_complexa = """
    Crie um sistema completo de an√°lise de dados com os seguintes componentes:
    
    1. Um m√≥dulo de coleta de dados (data_collector.py) que:
       - L√™ dados de m√∫ltiplas fontes (CSV, JSON, API)
       - Valida os dados recebidos
       - Trata erros e exce√ß√µes
    
    2. Um m√≥dulo de processamento (data_processor.py) que:
       - Limpa dados duplicados
       - Normaliza valores
       - Calcula estat√≠sticas b√°sicas (m√©dia, mediana, desvio padr√£o)
    
    3. Um m√≥dulo de visualiza√ß√£o (data_visualizer.py) que:
       - Gera gr√°ficos com matplotlib
       - Cria relat√≥rios em HTML
       - Exporta resultados em PDF
    
    4. Um arquivo main.py que:
       - Integra todos os m√≥dulos
       - Tem interface de linha de comando
       - Gera logs de execu√ß√£o
    
    5. Testes unit√°rios para cada m√≥dulo
    
    6. Um README.md completo com documenta√ß√£o
    
    Ap√≥s criar tudo, execute os testes para verificar que funciona.
    """
    
    # Inicializar agente (sem senha para teste)
    agente = AgenteCompletoFinal(
        api_key=os.getenv('ANTHROPIC_API_KEY'),
        master_password=None,
        usar_memoria=False  # Desabilitar mem√≥ria para teste puro
    )
    
    print("\nüìã Tarefa complexa definida")
    print("‚è±Ô∏è  Iniciando execu√ß√£o com limite de 50 itera√ß√µes...")
    print()
    
    try:
        agente.executar_tarefa(tarefa_complexa)
        print("\n" + "="*70)
        print("‚úÖ TESTE CONCLU√çDO")
        print("="*70)
    except Exception as e:
        print(f"\n‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    testar_limite_iteracoes()
