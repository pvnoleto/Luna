#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PATCH V3 FINAL: Corre√ß√£o Definitiva de Encoding
================================================
Problema: Windows cmd.exe retorna output em cp850/cp1252, n√£o UTF-8.
Solu√ß√£o: Detectar plataforma e usar encoding correto.
"""

import sys
import shutil
from datetime import datetime

def aplicar_patch_final():
    """Aplica corre√ß√£o definitiva com detec√ß√£o de plataforma"""
    
    arquivo = 'luna_completo_workspaces_CORRIGIDO.py'
    arquivo_backup = f'luna_completo_workspaces_CORRIGIDO.backup_v3_FINAL_{datetime.now().strftime("%Y%m%d_%H%M%S")}.py'
    
    print("üîß Aplicando PATCH V3 FINAL - Corre√ß√£o Definitiva")
    print("=" * 60)
    
    # Backup
    shutil.copy(arquivo, arquivo_backup)
    print(f"üíæ Backup: {arquivo_backup}")
    
    # Ler
    with open(arquivo, 'r', encoding='utf-8') as f:
        conteudo = f.read()
    
    # ========== CORRE√á√ÉO 1: bash_avancado ==========
    print("\nüîß Corre√ß√£o 1: bash_avancado")
    
    codigo_antigo_bash = '''def bash_avancado(comando: str, timeout: int = 60) -> str:
    import subprocess, os
    print(f"    [BASH] {comando[:100]}...")
    try:
        # ‚úÖ CORRE√á√ÉO: Encoding UTF-8 expl√≠cito para Windows
        resultado = subprocess.run(comando, shell=True, capture_output=True, 
                                 text=True, encoding='utf-8', errors='replace',
                                 timeout=timeout, cwd=os.getcwd())
        saida = f"STDOUT:\\\\n{resultado.stdout}\\\\nSTDERR:\\\\n{resultado.stderr}\\\\nCODE: {resultado.returncode}"
        print(f"    [OK] Codigo {resultado.returncode}")
        return saida[:3000]
    except Exception as e:
        return f"Erro: {e}"'''
    
    codigo_novo_bash = '''def bash_avancado(comando: str, timeout: int = 60) -> str:
    import subprocess, os, sys
    print(f"    [BASH] {comando[:100]}...")
    try:
        # ‚úÖ CORRE√á√ÉO FINAL: Detectar encoding do sistema
        # Windows cmd.exe usa cp850/cp1252, n√£o UTF-8
        if sys.platform == 'win32':
            # Tentar cp850 (cmd padr√£o), depois cp1252, depois utf-8
            for enc in ['cp850', 'cp1252', 'utf-8']:
                try:
                    resultado = subprocess.run(comando, shell=True, capture_output=True, 
                                             text=True, encoding=enc, errors='replace',
                                             timeout=timeout, cwd=os.getcwd())
                    break
                except (UnicodeDecodeError, LookupError):
                    if enc == 'utf-8':  # √öltima tentativa
                        resultado = subprocess.run(comando, shell=True, capture_output=True, 
                                                 text=True, errors='replace',
                                                 timeout=timeout, cwd=os.getcwd())
        else:
            # Linux/Mac: UTF-8 padr√£o
            resultado = subprocess.run(comando, shell=True, capture_output=True, 
                                     text=True, encoding='utf-8', errors='replace',
                                     timeout=timeout, cwd=os.getcwd())
        
        saida = f"STDOUT:\\\\n{resultado.stdout}\\\\nSTDERR:\\\\n{resultado.stderr}\\\\nCODE: {resultado.returncode}"
        print(f"    [OK] Codigo {resultado.returncode}")
        return saida[:3000]
    except Exception as e:
        return f"Erro: {e}"'''
    
    if codigo_antigo_bash in conteudo:
        conteudo = conteudo.replace(codigo_antigo_bash, codigo_novo_bash)
        print("‚úÖ bash_avancado corrigido com detec√ß√£o de plataforma")
    else:
        print("‚ö†Ô∏è  C√≥digo n√£o encontrado - tentando m√©todo alternativo...")
        # Tentar encontrar apenas a parte cr√≠tica
        if "def bash_avancado" in conteudo and "encoding='utf-8', errors='replace'" in conteudo:
            print("‚ö†Ô∏è  C√≥digo j√° parece estar parcialmente corrigido")
    
    # ========== CORRE√á√ÉO 2: instalar_biblioteca ==========
    print("\nüîß Corre√ß√£o 2: instalar_biblioteca")
    
    codigo_antigo_install = '''def instalar_biblioteca(nome_pacote: str) -> str:
    import subprocess
    print(f"    [INSTALL] Instalando: {nome_pacote}")
    try:
        resultado = subprocess.run(f"pip install {nome_pacote}", shell=True, 
                                 capture_output=True, text=True, encoding='utf-8',
                                 errors='replace', timeout=120)
        if resultado.returncode == 0:
            print("    [OK] Instalado")
            return f"'{nome_pacote}' instalado!"
        return f"Erro: {resultado.stderr[:500]}"
    except Exception as e:
        return f"Erro: {e}"'''
    
    codigo_novo_install = '''def instalar_biblioteca(nome_pacote: str) -> str:
    import subprocess, sys
    print(f"    [INSTALL] Instalando: {nome_pacote}")
    try:
        # ‚úÖ CORRE√á√ÉO FINAL: Encoding dependente de plataforma
        if sys.platform == 'win32':
            enc = 'cp850'  # Windows cmd padr√£o
        else:
            enc = 'utf-8'  # Linux/Mac
        
        resultado = subprocess.run(f"pip install {nome_pacote}", shell=True, 
                                 capture_output=True, text=True, encoding=enc,
                                 errors='replace', timeout=120)
        if resultado.returncode == 0:
            print("    [OK] Instalado")
            return f"'{nome_pacote}' instalado!"
        return f"Erro: {resultado.stderr[:500]}"
    except Exception as e:
        return f"Erro: {e}"'''
    
    if codigo_antigo_install in conteudo:
        conteudo = conteudo.replace(codigo_antigo_install, codigo_novo_install)
        print("‚úÖ instalar_biblioteca corrigido com detec√ß√£o de plataforma")
    else:
        print("‚ö†Ô∏è  C√≥digo n√£o encontrado")
    
    # Salvar
    print("\nüíæ Salvando arquivo corrigido...")
    with open(arquivo, 'w', encoding='utf-8') as f:
        f.write(conteudo)
    
    print("\n" + "=" * 60)
    print("‚úÖ PATCH V3 FINAL APLICADO COM SUCESSO!")
    print("=" * 60)
    print("\nüéØ CORRE√á√ïES APLICADAS:")
    print("   1. bash_avancado: Detec√ß√£o autom√°tica de encoding")
    print("      - Windows: Tenta cp850 ‚Üí cp1252 ‚Üí utf-8")
    print("      - Linux/Mac: utf-8 direto")
    print("   2. instalar_biblioteca: cp850 no Windows, utf-8 em outros")
    print("\n‚ö° REINICIE O AGENTE para aplicar as corre√ß√µes!")
    print(f"üì¶ Backup em: {arquivo_backup}")

if __name__ == "__main__":
    try:
        aplicar_patch_final()
    except Exception as e:
        print(f"\n‚ùå Erro ao aplicar patch: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
