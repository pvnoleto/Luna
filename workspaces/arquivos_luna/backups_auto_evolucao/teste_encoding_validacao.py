#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ Teste de Valida√ß√£o: Corre√ß√£o de Encoding
============================================
Este script testa se as corre√ß√µes de encoding foram aplicadas corretamente.
Execute AP√ìS reiniciar o agente.
"""

import subprocess
import sys

def teste_encoding_direto():
    """Testa subprocess.run diretamente com encoding"""
    print("üß™ Teste 1: subprocess.run direto com UTF-8")
    print("-" * 50)
    
    # Teste com acentua√ß√£o
    resultado = subprocess.run(
        'echo "Testando: √°√©√≠√≥√∫ √Å√â√ç√ì√ö √£√µ √ß√á üéâ"',
        shell=True,
        capture_output=True,
        text=True,
        encoding='utf-8',
        errors='replace'
    )
    
    output = resultado.stdout.strip()
    esperado = "Testando: √°√©√≠√≥√∫ √Å√â√ç√ì√ö √£√µ √ß√á üéâ"
    
    # No Windows, echo adiciona aspas
    if '"Testando:' in output:
        output = output.strip('"')
    
    print(f"Output:   {output}")
    print(f"Esperado: {esperado}")
    
    # Verificar caracteres problem√°ticos
    tem_erro = 'ÔøΩ' in output or '?' in output.replace('üéâ', '')
    
    if tem_erro:
        print("‚ùå FALHOU: Caracteres corrompidos detectados!")
        return False
    else:
        print("‚úÖ PASSOU: Encoding UTF-8 funcionando!")
        return True

def teste_encoding_sem_parametro():
    """Testa subprocess.run SEM encoding (deve falhar)"""
    print("\nüß™ Teste 2: subprocess.run SEM encoding (deve falhar)")
    print("-" * 50)
    
    try:
        resultado = subprocess.run(
            'echo "Teste: √°√©√≠√≥√∫"',
            shell=True,
            capture_output=True,
            text=True  # SEM encoding='utf-8'
        )
        
        output = resultado.stdout.strip()
        print(f"Output: {output}")
        
        tem_erro = 'ÔøΩ' in output or '?' in output
        
        if tem_erro:
            print("‚ö†Ô∏è  ESPERADO: Falha de encoding detectada (Windows padr√£o)")
            return True  # Este teste passa se detectar erro (esperado)
        else:
            print("‚úÖ Encoding padr√£o funcionou (Linux/Mac?)")
            return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Exce√ß√£o: {e}")
        return True

def teste_palavras_portuguesas():
    """Testa palavras portuguesas comuns"""
    print("\nüß™ Teste 3: Palavras portuguesas com acentua√ß√£o")
    print("-" * 50)
    
    palavras = [
        "a√ß√£o", "conclus√£o", "fun√ß√£o", "manuten√ß√£o",
        "caf√©", "voc√™", "at√©", "Jos√©",
        "ningu√©m", "tamb√©m", "por√©m", "ap√≥s"
    ]
    
    sucesso = True
    for palavra in palavras:
        resultado = subprocess.run(
            f'echo "{palavra}"',
            shell=True,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='replace'
        )
        
        output = resultado.stdout.strip().strip('"')
        tem_erro = 'ÔøΩ' in output
        
        status = "‚úÖ" if not tem_erro else "‚ùå"
        print(f"{status} {palavra} -> {output}")
        
        if tem_erro:
            sucesso = False
    
    return sucesso

def resumo_testes():
    """Executa todos os testes e mostra resumo"""
    print("\n" + "=" * 60)
    print("üß™ BATERIA DE TESTES DE ENCODING UTF-8")
    print("=" * 60)
    
    resultados = []
    
    # Teste 1
    try:
        r1 = teste_encoding_direto()
        resultados.append(("Subprocess com UTF-8", r1))
    except Exception as e:
        print(f"‚ùå Teste 1 falhou com exce√ß√£o: {e}")
        resultados.append(("Subprocess com UTF-8", False))
    
    # Teste 2
    try:
        r2 = teste_encoding_sem_parametro()
        resultados.append(("Subprocess SEM UTF-8", r2))
    except Exception as e:
        print(f"‚ùå Teste 2 falhou com exce√ß√£o: {e}")
        resultados.append(("Subprocess SEM UTF-8", False))
    
    # Teste 3
    try:
        r3 = teste_palavras_portuguesas()
        resultados.append(("Palavras Portuguesas", r3))
    except Exception as e:
        print(f"‚ùå Teste 3 falhou com exce√ß√£o: {e}")
        resultados.append(("Palavras Portuguesas", False))
    
    # Resumo
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    total = len(resultados)
    passou = sum(1 for _, r in resultados if r)
    
    for nome, resultado in resultados:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{status} - {nome}")
    
    print("\n" + "-" * 60)
    print(f"Total: {passou}/{total} testes passaram")
    print("-" * 60)
    
    if passou == total:
        print("\nüéâ SUCESSO TOTAL! Encoding UTF-8 funcionando perfeitamente!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  ATEN√á√ÉO: {total - passou} teste(s) falharam!")
        print("Verifique se as corre√ß√µes foram aplicadas e o agente foi reiniciado.")
        return 1

if __name__ == "__main__":
    print("Encoding do sistema:", sys.stdout.encoding)
    print("Filesystem encoding:", sys.getfilesystemencoding())
    print()
    
    sys.exit(resumo_testes())
