#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ TESTE PR√ÅTICO DOS GERENCIADORES
===================================
Demonstra√ß√£o completa de todos os recursos
"""

from gerenciador_temp import GerenciadorTemporarios
from gerenciador_workspaces import GerenciadorWorkspaces
from pathlib import Path
import time

def separador(titulo):
    """Imprime separador visual"""
    print("\n" + "="*80)
    print(f"  {titulo}")
    print("="*80 + "\n")

def teste_gerenciador_workspaces():
    """Testa todas as funcionalidades do gerenciador de workspaces"""
    separador("üß™ TESTE: GERENCIADOR DE WORKSPACES")
    
    gw = GerenciadorWorkspaces()
    
    # 1. Criar workspace
    print("1Ô∏è‚É£ Criando novo workspace 'demo_analise'...")
    resultado = gw.criar_workspace('demo_analise', 'Workspace de demonstra√ß√£o da an√°lise')
    print(f"   ‚úÖ Criado: {resultado}")
    
    # 2. Listar workspaces
    print("\n2Ô∏è‚É£ Listando workspaces existentes...")
    workspaces = gw.listar_workspaces()
    for ws in workspaces:
        print(f"   üìÅ {ws['nome']}: {ws.get('descricao', 'Sem descri√ß√£o')}")
    
    # 3. Selecionar workspace
    print("\n3Ô∏è‚É£ Selecionando workspace 'demo_analise'...")
    gw.selecionar_workspace('demo_analise')
    atual = gw.get_workspace_atual()
    print(f"   ‚úÖ Workspace atual: {atual}")
    
    # 4. Criar arquivo no workspace
    print("\n4Ô∏è‚É£ Criando arquivo no workspace...")
    gw.criar_arquivo('exemplo.py', '''#!/usr/bin/env python3
# Exemplo de c√≥digo no workspace
print("Hello from workspace!")
''')
    print(f"   ‚úÖ Arquivo criado")
    
    # 5. Resolver caminho
    print("\n5Ô∏è‚É£ Resolvendo caminho relativo...")
    caminho = gw.resolver_caminho('exemplo.py')
    print(f"   üìç Caminho completo: {caminho}")
    
    # 6. Listar arquivos
    print("\n6Ô∏è‚É£ Listando arquivos do workspace...")
    arquivos = gw.listar_arquivos('demo_analise')
    for arq in arquivos:
        print(f"   üìÑ {arq['nome']} ({arq['tamanho_bytes']} bytes)")
    
    # 7. Buscar arquivo
    print("\n7Ô∏è‚É£ Buscando arquivo 'exemplo.py'...")
    resultados = gw.buscar_arquivo('exemplo.py')
    for res in resultados:
        print(f"   üîç Encontrado em: {res['workspace']} -> {res['caminho_relativo']}")
    
    # 8. Exibir √°rvore
    print("\n8Ô∏è‚É£ Exibindo √°rvore de diret√≥rios...")
    gw.exibir_arvore('demo_analise')
    
    # 9. Status
    print("\n9Ô∏è‚É£ Exibindo status geral...")
    gw.exibir_status()
    
    return gw

def teste_gerenciador_temporarios():
    """Testa todas as funcionalidades do gerenciador de tempor√°rios"""
    separador("üß™ TESTE: GERENCIADOR DE TEMPOR√ÅRIOS")
    
    gt = GerenciadorTemporarios()
    
    # 1. Criar arquivo de teste
    print("1Ô∏è‚É£ Criando arquivo de teste tempor√°rio...")
    arquivo_teste = Path('test_temp_demo.txt')
    arquivo_teste.write_text('Este √© um arquivo de teste tempor√°rio', encoding='utf-8')
    print(f"   ‚úÖ Criado: {arquivo_teste}")
    
    # 2. Marcar como tempor√°rio
    print("\n2Ô∏è‚É£ Marcando arquivo como tempor√°rio...")
    resultado = gt.marcar_temporario(str(arquivo_teste))
    print(f"   ‚úÖ Marcado: {resultado}")
    
    # 3. Listar tempor√°rios
    print("\n3Ô∏è‚É£ Listando arquivos tempor√°rios...")
    temporarios = gt.listar_temporarios()
    for temp in temporarios:
        print(f"   üóëÔ∏è {temp['caminho']}")
        print(f"      Marcado em: {temp['marcado_em']}")
        print(f"      Deletar em: {temp['delete_em']}")
        print(f"      Tamanho: {temp['tamanho_bytes']} bytes")
    
    # 4. Obter estat√≠sticas
    print("\n4Ô∏è‚É£ Obtendo estat√≠sticas...")
    stats = gt.obter_estatisticas()
    print(f"   üìä Total tempor√°rios: {stats['total_temporarios']}")
    print(f"   üìä Total protegidos: {stats['total_protegidos']}")
    print(f"   üìä Total deletados: {stats['total_deletados']}")
    print(f"   üìä Total resgatados: {stats['total_resgatados']}")
    print(f"   üìä Espa√ßo liberado: {stats['espaco_liberado_mb']:.2f} MB")
    
    # 5. Proteger arquivo (simular resgate)
    print("\n5Ô∏è‚É£ Protegendo arquivo (removendo da lista de tempor√°rios)...")
    resultado = gt.proteger_arquivo(str(arquivo_teste))
    print(f"   ‚úÖ Protegido: {resultado}")
    
    # 6. Verificar se foi removido
    print("\n6Ô∏è‚É£ Verificando lista de tempor√°rios ap√≥s prote√ß√£o...")
    temporarios = gt.listar_temporarios()
    print(f"   üìä Total tempor√°rios agora: {len(temporarios)}")
    
    # 7. Criar novo arquivo e marcar novamente
    print("\n7Ô∏è‚É£ Criando novo arquivo tempor√°rio para demonstra√ß√£o...")
    arquivo_teste2 = Path('test_temp_demo2.log')
    arquivo_teste2.write_text('Log tempor√°rio de teste', encoding='utf-8')
    gt.marcar_temporario(str(arquivo_teste2), forcar=True)
    print(f"   ‚úÖ Criado e marcado: {arquivo_teste2}")
    
    # 8. Status
    print("\n8Ô∏è‚É£ Exibindo status geral...")
    gt.exibir_status()
    
    # 9. Limpar (n√£o vai deletar ainda pois n√£o completou 30 dias)
    print("\n9Ô∏è‚É£ Tentando limpar arquivos antigos...")
    resultado = gt.limpar_arquivos_antigos(exibir_resumo=True)
    print(f"   üìä Deletados: {resultado['deletados']}")
    print(f"   üìä Erros: {resultado['erros']}")
    
    # Limpar arquivos de teste
    print("\nüßπ Limpando arquivos de teste criados...")
    if arquivo_teste.exists():
        arquivo_teste.unlink()
        print(f"   ‚úÖ Removido: {arquivo_teste}")
    if arquivo_teste2.exists():
        arquivo_teste2.unlink()
        print(f"   ‚úÖ Removido: {arquivo_teste2}")
    
    return gt

def teste_integracao():
    """Testa integra√ß√£o entre os dois gerenciadores"""
    separador("üß™ TESTE: INTEGRA√á√ÉO DOS GERENCIADORES")
    
    gw = GerenciadorWorkspaces()
    gt = GerenciadorTemporarios()
    
    print("1Ô∏è‚É£ Criando workspace de teste...")
    gw.criar_workspace('teste_integracao', 'Workspace para teste de integra√ß√£o')
    gw.selecionar_workspace('teste_integracao')
    
    print("\n2Ô∏è‚É£ Criando arquivo de c√≥digo no workspace...")
    gw.criar_arquivo('codigo_importante.py', 'print("C√≥digo importante")')
    
    print("\n3Ô∏è‚É£ Criando arquivo de log tempor√°rio no workspace...")
    caminho_log = gw.resolver_caminho('debug.log')
    Path(caminho_log).write_text('Log de debug tempor√°rio', encoding='utf-8')
    
    print("\n4Ô∏è‚É£ Marcando arquivo de log como tempor√°rio...")
    gt.marcar_temporario(caminho_log)
    
    print("\n5Ô∏è‚É£ Listando arquivos do workspace...")
    arquivos = gw.listar_arquivos('teste_integracao')
    for arq in arquivos:
        print(f"   üìÑ {arq['nome']}")
    
    print("\n6Ô∏è‚É£ Listando tempor√°rios...")
    temporarios = gt.listar_temporarios()
    for temp in temporarios:
        print(f"   üóëÔ∏è {Path(temp['caminho']).name}")
    
    print("\n‚úÖ Integra√ß√£o funcionando perfeitamente!")
    print("   ‚Ä¢ Workspaces organizam projetos")
    print("   ‚Ä¢ Tempor√°rios marcam arquivos para limpeza")
    print("   ‚Ä¢ Ambos trabalham juntos de forma transparente")

def resumo_final():
    """Exibe resumo final dos testes"""
    separador("üìä RESUMO FINAL DA AN√ÅLISE")
    
    print("""
‚úÖ GERENCIADOR DE WORKSPACES:
   ‚Ä¢ Organiza projetos em pastas separadas
   ‚Ä¢ Resolve caminhos automaticamente
   ‚Ä¢ Busca arquivos em todos os workspaces
   ‚Ä¢ Exibe √°rvore de diret√≥rios
   ‚Ä¢ Renomeia e deleta workspaces

‚úÖ GERENCIADOR DE TEMPOR√ÅRIOS:
   ‚Ä¢ Marca arquivos para auto-limpeza
   ‚Ä¢ Deleta automaticamente ap√≥s 30 dias
   ‚Ä¢ Protege arquivos importantes
   ‚Ä¢ Rastreia estat√≠sticas de uso
   ‚Ä¢ Libera espa√ßo em disco

‚úÖ INTEGRA√á√ÉO:
   ‚Ä¢ Workspaces + Tempor√°rios = Organiza√ß√£o perfeita
   ‚Ä¢ Arquivos importantes no workspace correto
   ‚Ä¢ Arquivos tempor√°rios marcados para limpeza
   ‚Ä¢ Produtividade maximizada

üí° BOAS PR√ÅTICAS IDENTIFICADAS:
   1. Sempre criar workspace para novos projetos
   2. Usar resolver_caminho() para paths seguros
   3. Marcar screenshots/logs/debug como tempor√°rios
   4. Executar limpar_arquivos_antigos() semanalmente
   5. Verificar estat√≠sticas para monitorar uso
    """)

if __name__ == "__main__":
    print("\n" + "üöÄ INICIANDO TESTES COMPLETOS DOS GERENCIADORES" + "\n")
    print("=" * 80)
    
    try:
        # Executar testes
        teste_gerenciador_workspaces()
        time.sleep(1)
        
        teste_gerenciador_temporarios()
        time.sleep(1)
        
        teste_integracao()
        time.sleep(1)
        
        resumo_final()
        
        print("\n" + "="*80)
        print("‚úÖ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!")
        print("="*80 + "\n")
        
    except Exception as e:
        print(f"\n‚ùå ERRO durante os testes: {e}")
        import traceback
        traceback.print_exc()
