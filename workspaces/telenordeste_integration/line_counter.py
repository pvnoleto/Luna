"""
M√≥dulo para contagem de linhas e coment√°rios em arquivos Python.

Este m√≥dulo implementa fun√ß√£o para contar diferentes tipos de linhas
em c√≥digo Python: total, em branco, coment√°rios e c√≥digo.
"""

import re
from typing import Dict


def count_lines_and_comments(content: str) -> Dict[str, int]:
    """
    Conta linhas totais, em branco, coment√°rios e c√≥digo em conte√∫do Python.
    
    Analisa o conte√∫do de um arquivo Python e conta:
    - total_lines: Total de linhas (split por \\n)
    - blank_lines: Linhas em branco ou apenas com espa√ßos (regex r'^\\s*$')
    - comment_lines: Linhas que s√£o coment√°rios (regex r'^\\s*#')
    - code_lines: Linhas de c√≥digo (total - blank - comment)
    
    Args:
        content: String com o conte√∫do completo do arquivo Python
        
    Returns:
        Dicion√°rio com contadores:
        {
            'total_lines': int,
            'blank_lines': int,
            'comment_lines': int,
            'code_lines': int
        }
        
    Exemplo:
        >>> content = '''# Coment√°rio
        ... 
        ... def foo():
        ...     pass
        ... '''
        >>> result = count_lines_and_comments(content)
        >>> print(result)
        {'total_lines': 4, 'blank_lines': 1, 'comment_lines': 1, 'code_lines': 2}
        
    Nota:
        A soma de blank_lines + comment_lines + code_lines ser√° aproximadamente
        igual a total_lines. Pequenas diferen√ßas podem ocorrer devido a linhas
        que cont√™m c√≥digo E coment√°rio (ex: "x = 1  # coment√°rio").
    """
    # Split por linhas
    lines = content.split('\n')
    total_lines = len(lines)
    
    # Regex para linhas em branco (apenas whitespace)
    blank_pattern = re.compile(r'^\s*$')
    
    # Regex para linhas de coment√°rio (come√ßa com # ap√≥s whitespace opcional)
    comment_pattern = re.compile(r'^\s*#')
    
    # Contadores
    blank_lines = 0
    comment_lines = 0
    
    # Itera sobre cada linha
    for line in lines:
        if blank_pattern.match(line):
            blank_lines += 1
        elif comment_pattern.match(line):
            comment_lines += 1
    
    # Calcula linhas de c√≥digo
    code_lines = total_lines - blank_lines - comment_lines
    
    return {
        'total_lines': total_lines,
        'blank_lines': blank_lines,
        'comment_lines': comment_lines,
        'code_lines': code_lines
    }


# Testes e valida√ß√£o quando executado diretamente
if __name__ == "__main__":
    print("üß™ Testando count_lines_and_comments...")
    print("="*60)
    
    # Teste 1: C√≥digo simples
    test1 = """# Coment√°rio
    
def foo():
    pass
"""
    result1 = count_lines_and_comments(test1)
    print("\nüìù Teste 1: C√≥digo simples")
    print(f"Conte√∫do:\n{repr(test1)}")
    print(f"Resultado: {result1}")
    assert result1['total_lines'] == 5, "Total de linhas incorreto"
    assert result1['blank_lines'] == 2, "Linhas em branco incorretas"
    assert result1['comment_lines'] == 1, "Linhas de coment√°rio incorretas"
    assert result1['code_lines'] == 2, "Linhas de c√≥digo incorretas"
    print("‚úÖ Teste 1 passou!")
    
    # Teste 2: M√∫ltiplos coment√°rios
    test2 = """# Coment√°rio 1
# Coment√°rio 2
# Coment√°rio 3

def bar():
    # Coment√°rio interno
    return 42
"""
    result2 = count_lines_and_comments(test2)
    print("\nüìù Teste 2: M√∫ltiplos coment√°rios")
    print(f"Resultado: {result2}")
    assert result2['comment_lines'] == 4, "Contagem de coment√°rios incorreta"
    print("‚úÖ Teste 2 passou!")
    
    # Teste 3: Arquivo complexo (simulando arquivo real)
    test3 = '''"""
Docstring multilinha
n√£o √© coment√°rio
"""

import os
import sys  # Coment√°rio inline (ser√° contado como c√≥digo)

# Coment√°rio de bloco
# Mais coment√°rios
# Ainda mais coment√°rios

def funcao_exemplo():
    """Docstring da fun√ß√£o"""
    x = 1  # Isso √© c√≥digo com coment√°rio inline
    
    # Coment√°rio dentro da fun√ß√£o
    return x


class MinhaClasse:
    # Coment√°rio da classe
    pass

'''
    result3 = count_lines_and_comments(test3)
    print("\nüìù Teste 3: Arquivo complexo")
    print(f"Resultado: {result3}")
    print(f"  Total: {result3['total_lines']}")
    print(f"  Branco: {result3['blank_lines']}")
    print(f"  Coment√°rios: {result3['comment_lines']}")
    print(f"  C√≥digo: {result3['code_lines']}")
    
    # Validar crit√©rio de sucesso
    soma = result3['blank_lines'] + result3['comment_lines'] + result3['code_lines']
    print(f"\nüîç Valida√ß√£o: blank + comment + code = {soma}")
    print(f"   Total de linhas = {result3['total_lines']}")
    print(f"   Diferen√ßa = {abs(soma - result3['total_lines'])}")
    assert soma == result3['total_lines'], "Soma n√£o bate com total!"
    print("‚úÖ Teste 3 passou!")
    
    # Teste 4: Arquivo vazio
    test4 = ""
    result4 = count_lines_and_comments(test4)
    print("\nüìù Teste 4: Arquivo vazio")
    print(f"Resultado: {result4}")
    assert result4['total_lines'] == 1, "Arquivo vazio deve ter 1 linha"
    assert result4['blank_lines'] == 1, "Arquivo vazio deve ter 1 linha em branco"
    print("‚úÖ Teste 4 passou!")
    
    # Teste 5: S√≥ coment√°rios
    test5 = """# Coment√°rio 1
# Coment√°rio 2
# Coment√°rio 3"""
    result5 = count_lines_and_comments(test5)
    print("\nüìù Teste 5: S√≥ coment√°rios")
    print(f"Resultado: {result5}")
    assert result5['comment_lines'] == 3, "Todas as linhas devem ser coment√°rios"
    assert result5['code_lines'] == 0, "N√£o deve ter c√≥digo"
    print("‚úÖ Teste 5 passou!")
    
    # Teste 6: Indenta√ß√£o preservada em coment√°rios
    test6 = """def foo():
    # Coment√°rio indentado
    pass
"""
    result6 = count_lines_and_comments(test6)
    print("\nüìù Teste 6: Coment√°rios indentados")
    print(f"Resultado: {result6}")
    assert result6['comment_lines'] == 1, "Coment√°rio indentado deve ser contado"
    print("‚úÖ Teste 6 passou!")
    
    # VALIDA√á√ÉO FINAL DOS CRIT√âRIOS DE SUCESSO
    print("\n" + "="*60)
    print("VALIDA√á√ÉO DOS CRIT√âRIOS DE SUCESSO:")
    print("="*60)
    
    all_tests = [result1, result2, result3, result4, result5, result6]
    
    # Crit√©rio 1: Todos os valores s√£o n√£o negativos
    all_non_negative = all(
        r['total_lines'] >= 0 and 
        r['blank_lines'] >= 0 and 
        r['comment_lines'] >= 0 and 
        r['code_lines'] >= 0
        for r in all_tests
    )
    print(f"‚úì Todos os valores s√£o n√£o negativos: {all_non_negative}")
    
    # Crit√©rio 2: Soma aproximadamente igual ao total
    sums_match = all(
        r['blank_lines'] + r['comment_lines'] + r['code_lines'] == r['total_lines']
        for r in all_tests
    )
    print(f"‚úì Soma igual ao total em todos os testes: {sums_match}")
    
    # Crit√©rio 3: Fun√ß√£o retorna dicion√°rio com chaves corretas
    correct_keys = all(
        set(r.keys()) == {'total_lines', 'blank_lines', 'comment_lines', 'code_lines'}
        for r in all_tests
    )
    print(f"‚úì Dicion√°rio com chaves corretas: {correct_keys}")
    
    # Crit√©rio 4: Valores s√£o inteiros
    all_integers = all(
        isinstance(r['total_lines'], int) and
        isinstance(r['blank_lines'], int) and
        isinstance(r['comment_lines'], int) and
        isinstance(r['code_lines'], int)
        for r in all_tests
    )
    print(f"‚úì Todos os valores s√£o inteiros: {all_integers}")
    
    if all_non_negative and sums_match and correct_keys and all_integers:
        print("\nüéâ TODOS OS CRIT√âRIOS DE SUCESSO FORAM ATENDIDOS!")
        print("\n‚úÖ Fun√ß√£o count_lines_and_comments implementada com sucesso!")
    else:
        print("\n‚ö†Ô∏è  ALGUNS CRIT√âRIOS N√ÉO FORAM ATENDIDOS!")
        exit(1)
