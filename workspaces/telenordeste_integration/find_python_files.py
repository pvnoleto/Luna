"""
M√≥dulo para descoberta de arquivos Python em diret√≥rios.

Este m√≥dulo implementa fun√ß√£o para encontrar arquivos .py recursivamente,
excluindo diret√≥rios comuns de build/cache/venv.
"""

import os
from typing import List


def find_python_files(root_path: str) -> List[str]:
    """
    Descobre recursivamente todos os arquivos Python em um diret√≥rio.
    
    Percorre o diret√≥rio raiz recursivamente usando os.walk, filtra arquivos *.py
    e exclui diret√≥rios comuns que n√£o devem ser analisados (venv, cache, etc).
    
    Args:
        root_path: Caminho raiz do diret√≥rio para buscar arquivos Python
        
    Returns:
        Lista de caminhos absolutos para arquivos .py encontrados
        
    Exemplo:
        >>> python_files = find_python_files('/home/user/projeto')
        >>> print(len(python_files))
        42
        >>> print(python_files[0])
        /home/user/projeto/main.py
    """
    # Set de diret√≥rios a excluir da busca
    excluded_dirs = {
        'venv',
        '__pycache__',
        '.git',
        'node_modules',
        '.venv',
        'dist',
        'build'
    }
    
    python_files = []
    
    # Percorre recursivamente o diret√≥rio
    for dirpath, dirnames, filenames in os.walk(root_path):
        # Remove diret√≥rios exclu√≠dos da lista de diret√≥rios a visitar
        # Modifica dirnames in-place para que os.walk n√£o entre neles
        dirnames[:] = [d for d in dirnames if d not in excluded_dirs]
        
        # Filtra apenas arquivos .py
        for filename in filenames:
            if filename.endswith('.py'):
                # Cria caminho absoluto
                full_path = os.path.abspath(os.path.join(dirpath, filename))
                python_files.append(full_path)
    
    return python_files


# Teste da fun√ß√£o se executado diretamente
if __name__ == "__main__":
    import sys
    
    # Usa diret√≥rio atual se nenhum argumento for fornecido
    root = sys.argv[1] if len(sys.argv) > 1 else '.'
    
    print(f"üîç Buscando arquivos Python em: {os.path.abspath(root)}")
    print(f"üìÇ Diret√≥rios exclu√≠dos: venv, __pycache__, .git, node_modules, .venv, dist, build\n")
    
    files = find_python_files(root)
    
    print(f"‚úÖ Encontrados {len(files)} arquivos Python:\n")
    for file in sorted(files):
        print(f"  ‚Ä¢ {file}")
    
    # Valida√ß√£o dos crit√©rios de sucesso
    print("\n" + "="*60)
    print("VALIDA√á√ÉO DOS CRIT√âRIOS DE SUCESSO:")
    print("="*60)
    
    # Crit√©rio 1: Fun√ß√£o retorna lista
    print(f"‚úì Fun√ß√£o retorna lista: {isinstance(files, list)}")
    
    # Crit√©rio 2: Todos elementos terminam com .py
    all_py = all(f.endswith('.py') for f in files)
    print(f"‚úì Todos elementos terminam com .py: {all_py}")
    
    # Crit√©rio 3: Nenhum caminho cont√©m diret√≥rios exclu√≠dos
    excluded_dirs = {'venv', '__pycache__', '.git', 'node_modules', '.venv', 'dist', 'build'}
    no_excluded = all(
        not any(f"/{excluded_dir}/" in f or f"\\{excluded_dir}\\" in f 
                for excluded_dir in excluded_dirs)
        for f in files
    )
    print(f"‚úì Nenhum caminho cont√©m diret√≥rios exclu√≠dos: {no_excluded}")
    
    if all_py and no_excluded and isinstance(files, list):
        print("\nüéâ TODOS OS CRIT√âRIOS DE SUCESSO FORAM ATENDIDOS!")
    else:
        print("\n‚ö†Ô∏è  ALGUNS CRIT√âRIOS N√ÉO FORAM ATENDIDOS!")
