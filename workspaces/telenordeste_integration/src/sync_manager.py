"""
Gerenciador de Sincroniza√ß√£o entre Notion e Google Calendar
Coordena a sincroniza√ß√£o bidirecional de tarefas e eventos
"""

import os
import json
import time
from typing import Dict, List, Set
from datetime import datetime
from notion_client import NotionTaskClient
from calendar_client import GoogleCalendarClient


class SyncManager:
    """Gerencia a sincroniza√ß√£o entre Notion e Google Calendar"""
    
    def __init__(self, notion_client: NotionTaskClient, calendar_client: GoogleCalendarClient):
        """
        Inicializa o gerenciador de sincroniza√ß√£o
        
        Args:
            notion_client: Cliente do Notion
            calendar_client: Cliente do Google Calendar
        """
        self.notion = notion_client
        self.calendar = calendar_client
        self.sync_state_file = "config/sync_state.json"
        self.sync_state = self._load_sync_state()
    
    def _load_sync_state(self) -> Dict:
        """Carrega estado da √∫ltima sincroniza√ß√£o"""
        if os.path.exists(self.sync_state_file):
            try:
                with open(self.sync_state_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                pass
        
        return {
            "last_sync": None,
            "task_to_event": {},  # Mapeia notion_task_id -> calendar_event_id
            "synced_tasks": set()
        }
    
    def _save_sync_state(self):
        """Salva estado da sincroniza√ß√£o"""
        os.makedirs("config", exist_ok=True)
        
        # Converter set para list para JSON
        save_state = self.sync_state.copy()
        if isinstance(save_state.get("synced_tasks"), set):
            save_state["synced_tasks"] = list(save_state["synced_tasks"])
        
        with open(self.sync_state_file, 'w', encoding='utf-8') as f:
            json.dump(save_state, f, indent=2, ensure_ascii=False)
    
    def sync_notion_to_calendar(self, status_filter: str = None) -> Dict:
        """
        Sincroniza tarefas do Notion para o Google Calendar
        
        Args:
            status_filter: Filtrar tarefas por status (ex: "A Fazer")
            
        Returns:
            Estat√≠sticas da sincroniza√ß√£o
        """
        print("\n" + "="*60)
        print("üîÑ SINCRONIZA√á√ÉO: Notion ‚Üí Google Calendar")
        print("="*60)
        
        stats = {
            "total_tasks": 0,
            "created": 0,
            "updated": 0,
            "skipped": 0,
            "errors": 0
        }
        
        # Buscar tarefas do Notion
        print("\nüìã Buscando tarefas do Notion...")
        tasks = self.notion.get_tasks(filter_status=status_filter)
        stats["total_tasks"] = len(tasks)
        
        print(f"‚úÖ Encontradas {len(tasks)} tarefas")
        
        # Processar cada tarefa
        for i, task in enumerate(tasks, 1):
            print(f"\n[{i}/{len(tasks)}] üîÑ Processando: {task['title']}")
            
            try:
                task_id = task['id']
                
                # Verificar se j√° existe evento
                event_id = self.sync_state["task_to_event"].get(task_id)
                
                if not event_id:
                    # Buscar no calend√°rio
                    event_id = self.calendar.find_event_by_notion_id(task_id)
                
                if event_id:
                    # Atualizar evento existente
                    if self.calendar.update_event(event_id, task):
                        stats["updated"] += 1
                        self.sync_state["task_to_event"][task_id] = event_id
                    else:
                        stats["errors"] += 1
                else:
                    # Criar novo evento
                    event_id = self.calendar.create_event(task)
                    if event_id:
                        stats["created"] += 1
                        self.sync_state["task_to_event"][task_id] = event_id
                    else:
                        stats["errors"] += 1
                
            except Exception as e:
                print(f"‚ùå Erro ao processar tarefa: {e}")
                stats["errors"] += 1
        
        # Atualizar estado
        self.sync_state["last_sync"] = datetime.now().isoformat()
        self._save_sync_state()
        
        # Mostrar estat√≠sticas
        print("\n" + "="*60)
        print("üìä ESTAT√çSTICAS DA SINCRONIZA√á√ÉO")
        print("="*60)
        print(f"üìã Total de tarefas: {stats['total_tasks']}")
        print(f"‚úÖ Eventos criados: {stats['created']}")
        print(f"üîÑ Eventos atualizados: {stats['updated']}")
        print(f"‚è≠Ô∏è  Ignorados: {stats['skipped']}")
        print(f"‚ùå Erros: {stats['errors']}")
        print("="*60)
        
        return stats
    
    def sync_specific_tasks(self, task_ids: List[str]) -> Dict:
        """
        Sincroniza tarefas espec√≠ficas
        
        Args:
            task_ids: Lista de IDs de tarefas do Notion
            
        Returns:
            Estat√≠sticas
        """
        print(f"\nüîÑ Sincronizando {len(task_ids)} tarefas espec√≠ficas...")
        
        stats = {
            "total_tasks": len(task_ids),
            "created": 0,
            "updated": 0,
            "errors": 0
        }
        
        for task_id in task_ids:
            try:
                # Buscar tarefa
                task = self.notion.get_task_by_id(task_id)
                if not task:
                    stats["errors"] += 1
                    continue
                
                # Verificar se j√° existe evento
                event_id = self.sync_state["task_to_event"].get(task_id)
                
                if event_id:
                    # Atualizar
                    if self.calendar.update_event(event_id, task):
                        stats["updated"] += 1
                    else:
                        stats["errors"] += 1
                else:
                    # Criar
                    event_id = self.calendar.create_event(task)
                    if event_id:
                        stats["created"] += 1
                        self.sync_state["task_to_event"][task_id] = event_id
                    else:
                        stats["errors"] += 1
                        
            except Exception as e:
                print(f"‚ùå Erro: {e}")
                stats["errors"] += 1
        
        self._save_sync_state()
        return stats
    
    def remove_completed_events(self):
        """Remove eventos do calend√°rio para tarefas conclu√≠das"""
        print("\nüóëÔ∏è Removendo eventos de tarefas conclu√≠das...")
        
        removed = 0
        
        # Buscar tarefas conclu√≠das
        completed_tasks = self.notion.get_tasks(filter_status="Conclu√≠do")
        
        for task in completed_tasks:
            task_id = task['id']
            event_id = self.sync_state["task_to_event"].get(task_id)
            
            if event_id:
                if self.calendar.delete_event(event_id):
                    removed += 1
                    # Remover do mapeamento
                    del self.sync_state["task_to_event"][task_id]
        
        if removed > 0:
            self._save_sync_state()
            print(f"‚úÖ Removidos {removed} eventos")
        else:
            print("‚ÑπÔ∏è Nenhum evento para remover")
    
    def get_sync_info(self) -> Dict:
        """Retorna informa√ß√µes sobre o estado da sincroniza√ß√£o"""
        return {
            "last_sync": self.sync_state.get("last_sync"),
            "total_synced": len(self.sync_state.get("task_to_event", {})),
            "mappings": self.sync_state.get("task_to_event", {})
        }
    
    def auto_sync_loop(self, interval_minutes: int = 15, run_once: bool = False):
        """
        Loop de sincroniza√ß√£o autom√°tica
        
        Args:
            interval_minutes: Intervalo entre sincroniza√ß√µes
            run_once: Se True, executa apenas uma vez
        """
        print(f"\nü§ñ Modo de sincroniza√ß√£o autom√°tica")
        print(f"‚è∞ Intervalo: {interval_minutes} minutos")
        print(f"üîÑ Pressione Ctrl+C para parar\n")
        
        try:
            while True:
                try:
                    # Sincronizar tarefas "A Fazer" e "Em Progresso"
                    for status in ["A Fazer", "Em Progresso"]:
                        self.sync_notion_to_calendar(status_filter=status)
                    
                    # Remover eventos conclu√≠dos
                    self.remove_completed_events()
                    
                    if run_once:
                        break
                    
                    # Aguardar pr√≥ximo ciclo
                    print(f"\nüí§ Aguardando {interval_minutes} minutos at√© pr√≥xima sincroniza√ß√£o...")
                    time.sleep(interval_minutes * 60)
                    
                except KeyboardInterrupt:
                    raise
                except Exception as e:
                    print(f"\n‚ùå Erro na sincroniza√ß√£o: {e}")
                    print(f"‚è∞ Tentando novamente em {interval_minutes} minutos...")
                    time.sleep(interval_minutes * 60)
                    
        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è Sincroniza√ß√£o interrompida pelo usu√°rio")
            print("‚úÖ Estado salvo com sucesso")


def test_sync():
    """Fun√ß√£o de teste"""
    from dotenv import load_dotenv
    load_dotenv()
    
    # Inicializar clientes
    notion = NotionTaskClient(
        api_key=os.getenv("NOTION_API_KEY"),
        database_id=os.getenv("NOTION_DATABASE_ID")
    )
    
    calendar = GoogleCalendarClient(
        calendar_id=os.getenv("GOOGLE_CALENDAR_ID", "primary")
    )
    
    # Criar gerenciador
    manager = SyncManager(notion, calendar)
    
    # Executar sincroniza√ß√£o
    manager.sync_notion_to_calendar()
    
    # Mostrar info
    info = manager.get_sync_info()
    print(f"\n‚ÑπÔ∏è √öltima sincroniza√ß√£o: {info['last_sync']}")
    print(f"üìä Total sincronizado: {info['total_synced']} tarefas")


if __name__ == "__main__":
    test_sync()
