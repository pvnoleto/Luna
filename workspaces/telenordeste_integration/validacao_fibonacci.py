#!/usr/bin/env python3
"""
Script de valida√ß√£o do fibonacci_results.txt
"""
import re

# Leitura do arquivo
with open('fibonacci_results.txt', 'r', encoding='utf-8') as f:
    conteudo = f.read()

print("=" * 70)
print("VALIDA√á√ÉO DO ARQUIVO fibonacci_results.txt")
print("=" * 70)

# Crit√©rios de valida√ß√£o
criterios = {
    "1. Valor correto Fibonacci(30) = 832040": False,
    "2. Tempo de execu√ß√£o iterativa": False,
    "3. Tempo de execu√ß√£o recursiva": False,
    "4. Compara√ß√£o quantitativa (fator)": False,
    "5. Explica√ß√£o sobre complexidade": False
}

# Valida√ß√£o 1: N√∫mero correto
if "832,040" in conteudo or "832040" in conteudo:
    criterios["1. Valor correto Fibonacci(30) = 832040"] = True
    print("‚úÖ Crit√©rio 1: Valor 832040 encontrado")
else:
    print("‚ùå Crit√©rio 1: Valor 832040 N√ÉO encontrado")

# Valida√ß√£o 2: Tempo iterativa
if "ITERATIVA" in conteudo and "segundos" in conteudo:
    # Extrair tempo
    match_iter = re.search(r'ITERATIVA:\s+([\d.]+)\s+segundos', conteudo)
    if match_iter:
        tempo_iter = float(match_iter.group(1))
        criterios["2. Tempo de execu√ß√£o iterativa"] = True
        print(f"‚úÖ Crit√©rio 2: Tempo iterativa = {tempo_iter} segundos")
    else:
        print("‚ùå Crit√©rio 2: Tempo iterativa N√ÉO encontrado")
else:
    print("‚ùå Crit√©rio 2: Tempo iterativa N√ÉO encontrado")

# Valida√ß√£o 3: Tempo recursiva
if "RECURSIVA" in conteudo and "segundos" in conteudo:
    match_rec = re.search(r'RECURSIVA:\s+([\d.]+)\s+segundos', conteudo)
    if match_rec:
        tempo_rec = float(match_rec.group(1))
        criterios["3. Tempo de execu√ß√£o recursiva"] = True
        print(f"‚úÖ Crit√©rio 3: Tempo recursiva = {tempo_rec} segundos")
    else:
        print("‚ùå Crit√©rio 3: Tempo recursiva N√ÉO encontrado")
else:
    print("‚ùå Crit√©rio 3: Tempo recursiva N√ÉO encontrado")

# Valida√ß√£o 4: Compara√ß√£o quantitativa
if "mais r√°pida" in conteudo or "vezes" in conteudo or "x mais" in conteudo:
    match_comp = re.search(r'([\d,]+(?:\.\d+)?)\s*x\s+mais r√°pida', conteudo)
    if match_comp:
        fator = match_comp.group(1).replace(',', '')
        fator_num = float(fator)
        criterios["4. Compara√ß√£o quantitativa (fator)"] = True
        print(f"‚úÖ Crit√©rio 4: Fator de velocidade = {fator_num}x")
        if fator_num > 1000:
            print(f"   ‚úì Fator > 1000x confirmado ({fator_num:.2f}x)")
    else:
        print("‚ùå Crit√©rio 4: Fator de velocidade N√ÉO encontrado")
else:
    print("‚ùå Crit√©rio 4: Compara√ß√£o N√ÉO encontrada")

# Valida√ß√£o 5: Explica√ß√£o sobre complexidade
termos_complexidade = ["O(2^n)", "O(n)", "complexidade", "exponencial", "linear"]
termos_encontrados = [termo for termo in termos_complexidade if termo in conteudo]

if len(termos_encontrados) >= 2:
    criterios["5. Explica√ß√£o sobre complexidade"] = True
    print(f"‚úÖ Crit√©rio 5: Explica√ß√£o sobre complexidade encontrada")
    print(f"   Termos encontrados: {', '.join(termos_encontrados)}")
else:
    print("‚ùå Crit√©rio 5: Explica√ß√£o sobre complexidade INSUFICIENTE")

print("\n" + "=" * 70)
print("RESUMO DA VALIDA√á√ÉO")
print("=" * 70)

todos_ok = all(criterios.values())
total = len(criterios)
aprovados = sum(criterios.values())

for criterio, status in criterios.items():
    simbolo = "‚úÖ" if status else "‚ùå"
    print(f"{simbolo} {criterio}")

print("\n" + "-" * 70)
print(f"RESULTADO: {aprovados}/{total} crit√©rios atendidos")

if todos_ok:
    print("\nüéâ VALIDA√á√ÉO COMPLETA: Todos os crit√©rios foram atendidos!")
    exit(0)
else:
    print("\n‚ö†Ô∏è  VALIDA√á√ÉO PARCIAL: Alguns crit√©rios n√£o foram atendidos.")
    exit(1)
