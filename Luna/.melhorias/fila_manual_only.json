{
  "manual_only": [
    {
      "id": "0d705dafc84d",
      "tipo": "otimizacao",
      "alvo": "linha_5215_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.814340",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "eb6b847fd141",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (243 linhas)",
      "codigo": "# Refatorar função 'main' (243 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.830865",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "07397bbb77db",
      "tipo": "refatoracao",
      "alvo": "_analisar_tarefa",
      "motivo": "Função muito grande detectada: _analisar_tarefa (105 linhas)",
      "codigo": "# Refatorar função '_analisar_tarefa' (105 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _analisar_tarefa(self, ...):\n#     parte1 = self.__analisar_tarefa_parte1(...)\n#     parte2 = self.__analisar_tarefa_parte2(...)\n#     return self.__analisar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.831867",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "57eb817edeb0",
      "tipo": "refatoracao",
      "alvo": "_criar_estrategia",
      "motivo": "Função muito grande detectada: _criar_estrategia (101 linhas)",
      "codigo": "# Refatorar função '_criar_estrategia' (101 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _criar_estrategia(self, ...):\n#     parte1 = self.__criar_estrategia_parte1(...)\n#     parte2 = self.__criar_estrategia_parte2(...)\n#     return self.__criar_estrategia_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.832566",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "e7aa66908ed7",
      "tipo": "refatoracao",
      "alvo": "_decompor_em_subtarefas",
      "motivo": "Função muito grande detectada: _decompor_em_subtarefas (116 linhas)",
      "codigo": "# Refatorar função '_decompor_em_subtarefas' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _decompor_em_subtarefas(self, ...):\n#     parte1 = self.__decompor_em_subtarefas_parte1(...)\n#     parte2 = self.__decompor_em_subtarefas_parte2(...)\n#     return self.__decompor_em_subtarefas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.833400",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "313aaf96dcc1",
      "tipo": "refatoracao",
      "alvo": "_validar_plano",
      "motivo": "Função muito grande detectada: _validar_plano (133 linhas)",
      "codigo": "# Refatorar função '_validar_plano' (133 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _validar_plano(self, ...):\n#     parte1 = self.__validar_plano_parte1(...)\n#     parte2 = self.__validar_plano_parte2(...)\n#     return self.__validar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.834045",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "ea1e0f66307f",
      "tipo": "refatoracao",
      "alvo": "executar_plano",
      "motivo": "Função muito grande detectada: executar_plano (116 linhas)",
      "codigo": "# Refatorar função 'executar_plano' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_plano(self, ...):\n#     parte1 = self._executar_plano_parte1(...)\n#     parte2 = self._executar_plano_parte2(...)\n#     return self._executar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.834831",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "88bff1a9f284",
      "tipo": "refatoracao",
      "alvo": "_executar_onda_paralela",
      "motivo": "Função muito grande detectada: _executar_onda_paralela (149 linhas)",
      "codigo": "# Refatorar função '_executar_onda_paralela' (149 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_onda_paralela(self, ...):\n#     parte1 = self.__executar_onda_paralela_parte1(...)\n#     parte2 = self.__executar_onda_paralela_parte2(...)\n#     return self.__executar_onda_paralela_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.835514",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "72c48055b7c8",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_navegador",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_navegador (122 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_navegador' (122 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_navegador(self, ...):\n#     parte1 = self.__carregar_ferramentas_navegador_parte1(...)\n#     parte2 = self.__carregar_ferramentas_navegador_parte2(...)\n#     return self.__carregar_ferramentas_navegador_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.836278",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "b6a4b1ce4147",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_workspace",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_workspace (152 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_workspace' (152 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_workspace(self, ...):\n#     parte1 = self.__carregar_ferramentas_workspace_parte1(...)\n#     parte2 = self.__carregar_ferramentas_workspace_parte2(...)\n#     return self.__carregar_ferramentas_workspace_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.836979",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "67d6a7b0a629",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_telemetria",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_telemetria (120 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_telemetria' (120 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_telemetria(self, ...):\n#     parte1 = self.__carregar_ferramentas_telemetria_parte1(...)\n#     parte2 = self.__carregar_ferramentas_telemetria_parte2(...)\n#     return self.__carregar_ferramentas_telemetria_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.837667",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "2d119f62b99c",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_meta",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_meta (468 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_meta' (468 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_meta(self, ...):\n#     parte1 = self.__carregar_ferramentas_meta_parte1(...)\n#     parte2 = self.__carregar_ferramentas_meta_parte2(...)\n#     return self.__carregar_ferramentas_meta_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.838405",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "2e48c73727ba",
      "tipo": "refatoracao",
      "alvo": "executar",
      "motivo": "Função muito grande detectada: executar (138 linhas)",
      "codigo": "# Refatorar função 'executar' (138 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar(self, ...):\n#     parte1 = self._executar_parte1(...)\n#     parte2 = self._executar_parte2(...)\n#     return self._executar_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.839146",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "56bc15cdcc86",
      "tipo": "refatoracao",
      "alvo": "__init__",
      "motivo": "Função muito grande detectada: __init__ (140 linhas)",
      "codigo": "# Refatorar função '__init__' (140 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def __init__(self, ...):\n#     parte1 = self.___init___parte1(...)\n#     parte2 = self.___init___parte2(...)\n#     return self.___init___final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.839931",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "c36f298282cf",
      "tipo": "refatoracao",
      "alvo": "_executar_chamada_api",
      "motivo": "Função muito grande detectada: _executar_chamada_api (103 linhas)",
      "codigo": "# Refatorar função '_executar_chamada_api' (103 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_chamada_api(self, ...):\n#     parte1 = self.__executar_chamada_api_parte1(...)\n#     parte2 = self.__executar_chamada_api_parte2(...)\n#     return self.__executar_chamada_api_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.840720",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "3d0a00c66c31",
      "tipo": "refatoracao",
      "alvo": "_processar_uso_ferramentas",
      "motivo": "Função muito grande detectada: _processar_uso_ferramentas (135 linhas)",
      "codigo": "# Refatorar função '_processar_uso_ferramentas' (135 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _processar_uso_ferramentas(self, ...):\n#     parte1 = self.__processar_uso_ferramentas_parte1(...)\n#     parte2 = self.__processar_uso_ferramentas_parte2(...)\n#     return self.__processar_uso_ferramentas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.841486",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "fa0b0533be6a",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (232 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (232 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.842324",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "74ee7544f055",
      "tipo": "feature",
      "alvo": "linha_4540_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar correção específica",
      "codigo": "# Implementar: TODO: Implementar correção específica\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.869160",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "d32423c646a8",
      "tipo": "feature",
      "alvo": "linha_4937_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: 2. Detectar TODOs antigos",
      "codigo": "# Implementar: 2. Detectar TODOs antigos\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.870103",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "e784714ab050",
      "tipo": "feature",
      "alvo": "linha_4994_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.871033",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "9ba1bbf467e9",
      "tipo": "feature",
      "alvo": "linha_5002_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Extrair conteúdo do TODO",
      "codigo": "# Implementar: Extrair conteúdo do TODO\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.871938",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "2c714d8fd422",
      "tipo": "feature",
      "alvo": "linha_5012_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.",
      "codigo": "# Implementar: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:18:29.872842",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "663ca02c75ac",
      "tipo": "otimizacao",
      "alvo": "linha_5215_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.077509",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "7b5fd18cc958",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (243 linhas)",
      "codigo": "# Refatorar função 'main' (243 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.096743",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "5fa6de335f77",
      "tipo": "refatoracao",
      "alvo": "_analisar_tarefa",
      "motivo": "Função muito grande detectada: _analisar_tarefa (105 linhas)",
      "codigo": "# Refatorar função '_analisar_tarefa' (105 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _analisar_tarefa(self, ...):\n#     parte1 = self.__analisar_tarefa_parte1(...)\n#     parte2 = self.__analisar_tarefa_parte2(...)\n#     return self.__analisar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.099154",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "08b41c579466",
      "tipo": "refatoracao",
      "alvo": "_criar_estrategia",
      "motivo": "Função muito grande detectada: _criar_estrategia (101 linhas)",
      "codigo": "# Refatorar função '_criar_estrategia' (101 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _criar_estrategia(self, ...):\n#     parte1 = self.__criar_estrategia_parte1(...)\n#     parte2 = self.__criar_estrategia_parte2(...)\n#     return self.__criar_estrategia_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.101628",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "9b22580601d9",
      "tipo": "refatoracao",
      "alvo": "_decompor_em_subtarefas",
      "motivo": "Função muito grande detectada: _decompor_em_subtarefas (116 linhas)",
      "codigo": "# Refatorar função '_decompor_em_subtarefas' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _decompor_em_subtarefas(self, ...):\n#     parte1 = self.__decompor_em_subtarefas_parte1(...)\n#     parte2 = self.__decompor_em_subtarefas_parte2(...)\n#     return self.__decompor_em_subtarefas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.103269",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "f24bdf3c21ec",
      "tipo": "refatoracao",
      "alvo": "_validar_plano",
      "motivo": "Função muito grande detectada: _validar_plano (133 linhas)",
      "codigo": "# Refatorar função '_validar_plano' (133 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _validar_plano(self, ...):\n#     parte1 = self.__validar_plano_parte1(...)\n#     parte2 = self.__validar_plano_parte2(...)\n#     return self.__validar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.104623",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "06904a236ad7",
      "tipo": "refatoracao",
      "alvo": "executar_plano",
      "motivo": "Função muito grande detectada: executar_plano (116 linhas)",
      "codigo": "# Refatorar função 'executar_plano' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_plano(self, ...):\n#     parte1 = self._executar_plano_parte1(...)\n#     parte2 = self._executar_plano_parte2(...)\n#     return self._executar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.105824",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "940614ccb22b",
      "tipo": "refatoracao",
      "alvo": "_executar_onda_paralela",
      "motivo": "Função muito grande detectada: _executar_onda_paralela (149 linhas)",
      "codigo": "# Refatorar função '_executar_onda_paralela' (149 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_onda_paralela(self, ...):\n#     parte1 = self.__executar_onda_paralela_parte1(...)\n#     parte2 = self.__executar_onda_paralela_parte2(...)\n#     return self.__executar_onda_paralela_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.106993",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "747419d6206a",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_navegador",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_navegador (122 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_navegador' (122 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_navegador(self, ...):\n#     parte1 = self.__carregar_ferramentas_navegador_parte1(...)\n#     parte2 = self.__carregar_ferramentas_navegador_parte2(...)\n#     return self.__carregar_ferramentas_navegador_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.108275",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "fbab002a83cb",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_workspace",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_workspace (152 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_workspace' (152 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_workspace(self, ...):\n#     parte1 = self.__carregar_ferramentas_workspace_parte1(...)\n#     parte2 = self.__carregar_ferramentas_workspace_parte2(...)\n#     return self.__carregar_ferramentas_workspace_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.109481",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "3608b2f23f3d",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_telemetria",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_telemetria (120 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_telemetria' (120 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_telemetria(self, ...):\n#     parte1 = self.__carregar_ferramentas_telemetria_parte1(...)\n#     parte2 = self.__carregar_ferramentas_telemetria_parte2(...)\n#     return self.__carregar_ferramentas_telemetria_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.110871",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "38c91fe0ac43",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_meta",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_meta (468 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_meta' (468 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_meta(self, ...):\n#     parte1 = self.__carregar_ferramentas_meta_parte1(...)\n#     parte2 = self.__carregar_ferramentas_meta_parte2(...)\n#     return self.__carregar_ferramentas_meta_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.112379",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "38456fc3ff26",
      "tipo": "refatoracao",
      "alvo": "executar",
      "motivo": "Função muito grande detectada: executar (138 linhas)",
      "codigo": "# Refatorar função 'executar' (138 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar(self, ...):\n#     parte1 = self._executar_parte1(...)\n#     parte2 = self._executar_parte2(...)\n#     return self._executar_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.113682",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "0b5f2baa52d8",
      "tipo": "refatoracao",
      "alvo": "__init__",
      "motivo": "Função muito grande detectada: __init__ (140 linhas)",
      "codigo": "# Refatorar função '__init__' (140 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def __init__(self, ...):\n#     parte1 = self.___init___parte1(...)\n#     parte2 = self.___init___parte2(...)\n#     return self.___init___final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.115089",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "cc01f98f011c",
      "tipo": "refatoracao",
      "alvo": "_executar_chamada_api",
      "motivo": "Função muito grande detectada: _executar_chamada_api (103 linhas)",
      "codigo": "# Refatorar função '_executar_chamada_api' (103 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_chamada_api(self, ...):\n#     parte1 = self.__executar_chamada_api_parte1(...)\n#     parte2 = self.__executar_chamada_api_parte2(...)\n#     return self.__executar_chamada_api_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.116423",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "1614e45cf499",
      "tipo": "refatoracao",
      "alvo": "_processar_uso_ferramentas",
      "motivo": "Função muito grande detectada: _processar_uso_ferramentas (135 linhas)",
      "codigo": "# Refatorar função '_processar_uso_ferramentas' (135 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _processar_uso_ferramentas(self, ...):\n#     parte1 = self.__processar_uso_ferramentas_parte1(...)\n#     parte2 = self.__processar_uso_ferramentas_parte2(...)\n#     return self.__processar_uso_ferramentas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.117715",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7f0da011c93c",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (232 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (232 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.119070",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "f0ae9eef3267",
      "tipo": "feature",
      "alvo": "linha_4540_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar correção específica",
      "codigo": "# Implementar: TODO: Implementar correção específica\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.140075",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "004bbc2166c9",
      "tipo": "feature",
      "alvo": "linha_4937_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: 2. Detectar TODOs antigos",
      "codigo": "# Implementar: 2. Detectar TODOs antigos\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.141511",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "c9266546ca3d",
      "tipo": "feature",
      "alvo": "linha_4994_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.143015",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "a1986f400bc8",
      "tipo": "feature",
      "alvo": "linha_5002_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Extrair conteúdo do TODO",
      "codigo": "# Implementar: Extrair conteúdo do TODO\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.144465",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "f820a385cfa8",
      "tipo": "feature",
      "alvo": "linha_5012_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.",
      "codigo": "# Implementar: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T14:51:18.145934",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "4cf03ffe336a",
      "tipo": "otimizacao",
      "alvo": "linha_5224_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.152818",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "79c7f11ef8c0",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (243 linhas)",
      "codigo": "# Refatorar função 'main' (243 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.169542",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "70a89d6226ed",
      "tipo": "refatoracao",
      "alvo": "_analisar_tarefa",
      "motivo": "Função muito grande detectada: _analisar_tarefa (105 linhas)",
      "codigo": "# Refatorar função '_analisar_tarefa' (105 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _analisar_tarefa(self, ...):\n#     parte1 = self.__analisar_tarefa_parte1(...)\n#     parte2 = self.__analisar_tarefa_parte2(...)\n#     return self.__analisar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.171919",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "6cbc6029c535",
      "tipo": "refatoracao",
      "alvo": "_criar_estrategia",
      "motivo": "Função muito grande detectada: _criar_estrategia (101 linhas)",
      "codigo": "# Refatorar função '_criar_estrategia' (101 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _criar_estrategia(self, ...):\n#     parte1 = self.__criar_estrategia_parte1(...)\n#     parte2 = self.__criar_estrategia_parte2(...)\n#     return self.__criar_estrategia_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.173605",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "a1893017c088",
      "tipo": "refatoracao",
      "alvo": "_decompor_em_subtarefas",
      "motivo": "Função muito grande detectada: _decompor_em_subtarefas (116 linhas)",
      "codigo": "# Refatorar função '_decompor_em_subtarefas' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _decompor_em_subtarefas(self, ...):\n#     parte1 = self.__decompor_em_subtarefas_parte1(...)\n#     parte2 = self.__decompor_em_subtarefas_parte2(...)\n#     return self.__decompor_em_subtarefas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.175437",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "52d9c0038ee6",
      "tipo": "refatoracao",
      "alvo": "_validar_plano",
      "motivo": "Função muito grande detectada: _validar_plano (133 linhas)",
      "codigo": "# Refatorar função '_validar_plano' (133 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _validar_plano(self, ...):\n#     parte1 = self.__validar_plano_parte1(...)\n#     parte2 = self.__validar_plano_parte2(...)\n#     return self.__validar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.177475",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7edd3b338dbd",
      "tipo": "refatoracao",
      "alvo": "executar_plano",
      "motivo": "Função muito grande detectada: executar_plano (116 linhas)",
      "codigo": "# Refatorar função 'executar_plano' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_plano(self, ...):\n#     parte1 = self._executar_plano_parte1(...)\n#     parte2 = self._executar_plano_parte2(...)\n#     return self._executar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.179419",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "6e265452c362",
      "tipo": "refatoracao",
      "alvo": "_executar_onda_paralela",
      "motivo": "Função muito grande detectada: _executar_onda_paralela (149 linhas)",
      "codigo": "# Refatorar função '_executar_onda_paralela' (149 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_onda_paralela(self, ...):\n#     parte1 = self.__executar_onda_paralela_parte1(...)\n#     parte2 = self.__executar_onda_paralela_parte2(...)\n#     return self.__executar_onda_paralela_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.181184",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "ae6d5a2809a1",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_navegador",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_navegador (122 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_navegador' (122 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_navegador(self, ...):\n#     parte1 = self.__carregar_ferramentas_navegador_parte1(...)\n#     parte2 = self.__carregar_ferramentas_navegador_parte2(...)\n#     return self.__carregar_ferramentas_navegador_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.183197",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "10a8137006c2",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_workspace",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_workspace (152 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_workspace' (152 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_workspace(self, ...):\n#     parte1 = self.__carregar_ferramentas_workspace_parte1(...)\n#     parte2 = self.__carregar_ferramentas_workspace_parte2(...)\n#     return self.__carregar_ferramentas_workspace_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.184899",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "348d96729092",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_telemetria",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_telemetria (120 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_telemetria' (120 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_telemetria(self, ...):\n#     parte1 = self.__carregar_ferramentas_telemetria_parte1(...)\n#     parte2 = self.__carregar_ferramentas_telemetria_parte2(...)\n#     return self.__carregar_ferramentas_telemetria_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.186926",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "ae88589c13e2",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_meta",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_meta (468 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_meta' (468 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_meta(self, ...):\n#     parte1 = self.__carregar_ferramentas_meta_parte1(...)\n#     parte2 = self.__carregar_ferramentas_meta_parte2(...)\n#     return self.__carregar_ferramentas_meta_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.188941",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "4f9ef2f4a9ae",
      "tipo": "refatoracao",
      "alvo": "executar",
      "motivo": "Função muito grande detectada: executar (138 linhas)",
      "codigo": "# Refatorar função 'executar' (138 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar(self, ...):\n#     parte1 = self._executar_parte1(...)\n#     parte2 = self._executar_parte2(...)\n#     return self._executar_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.190984",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "4ad0ff0963dd",
      "tipo": "refatoracao",
      "alvo": "__init__",
      "motivo": "Função muito grande detectada: __init__ (140 linhas)",
      "codigo": "# Refatorar função '__init__' (140 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def __init__(self, ...):\n#     parte1 = self.___init___parte1(...)\n#     parte2 = self.___init___parte2(...)\n#     return self.___init___final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.192723",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "897b83b105c0",
      "tipo": "refatoracao",
      "alvo": "_executar_chamada_api",
      "motivo": "Função muito grande detectada: _executar_chamada_api (103 linhas)",
      "codigo": "# Refatorar função '_executar_chamada_api' (103 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_chamada_api(self, ...):\n#     parte1 = self.__executar_chamada_api_parte1(...)\n#     parte2 = self.__executar_chamada_api_parte2(...)\n#     return self.__executar_chamada_api_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.194647",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "b13473eb2ad0",
      "tipo": "refatoracao",
      "alvo": "_processar_uso_ferramentas",
      "motivo": "Função muito grande detectada: _processar_uso_ferramentas (135 linhas)",
      "codigo": "# Refatorar função '_processar_uso_ferramentas' (135 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _processar_uso_ferramentas(self, ...):\n#     parte1 = self.__processar_uso_ferramentas_parte1(...)\n#     parte2 = self.__processar_uso_ferramentas_parte2(...)\n#     return self.__processar_uso_ferramentas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.196436",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "b39bf9eedfd6",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (232 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (232 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.198238",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "a551e3569477",
      "tipo": "feature",
      "alvo": "linha_4549_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar correção específica",
      "codigo": "# Implementar: TODO: Implementar correção específica\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.221370",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "acc2171c7b5a",
      "tipo": "feature",
      "alvo": "linha_4946_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: 2. Detectar TODOs antigos",
      "codigo": "# Implementar: 2. Detectar TODOs antigos\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.223224",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "6ad2c76272d2",
      "tipo": "feature",
      "alvo": "linha_5003_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.225084",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "1c48a26395c1",
      "tipo": "feature",
      "alvo": "linha_5011_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Extrair conteúdo do TODO",
      "codigo": "# Implementar: Extrair conteúdo do TODO\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.227011",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "f5dac242c091",
      "tipo": "feature",
      "alvo": "linha_5021_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.",
      "codigo": "# Implementar: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:06:08.228859",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "3e3ba7e60e9a",
      "tipo": "otimizacao",
      "alvo": "linha_5231_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.057543",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "3603c3dd0360",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (243 linhas)",
      "codigo": "# Refatorar função 'main' (243 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.075376",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "0103c350b46b",
      "tipo": "refatoracao",
      "alvo": "_analisar_tarefa",
      "motivo": "Função muito grande detectada: _analisar_tarefa (105 linhas)",
      "codigo": "# Refatorar função '_analisar_tarefa' (105 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _analisar_tarefa(self, ...):\n#     parte1 = self.__analisar_tarefa_parte1(...)\n#     parte2 = self.__analisar_tarefa_parte2(...)\n#     return self.__analisar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.077820",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "790ed9fa6b6d",
      "tipo": "refatoracao",
      "alvo": "_criar_estrategia",
      "motivo": "Função muito grande detectada: _criar_estrategia (101 linhas)",
      "codigo": "# Refatorar função '_criar_estrategia' (101 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _criar_estrategia(self, ...):\n#     parte1 = self.__criar_estrategia_parte1(...)\n#     parte2 = self.__criar_estrategia_parte2(...)\n#     return self.__criar_estrategia_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.080543",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "06cfb66b6fec",
      "tipo": "refatoracao",
      "alvo": "_decompor_em_subtarefas",
      "motivo": "Função muito grande detectada: _decompor_em_subtarefas (116 linhas)",
      "codigo": "# Refatorar função '_decompor_em_subtarefas' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _decompor_em_subtarefas(self, ...):\n#     parte1 = self.__decompor_em_subtarefas_parte1(...)\n#     parte2 = self.__decompor_em_subtarefas_parte2(...)\n#     return self.__decompor_em_subtarefas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.083171",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "72c87b1d1073",
      "tipo": "refatoracao",
      "alvo": "_validar_plano",
      "motivo": "Função muito grande detectada: _validar_plano (133 linhas)",
      "codigo": "# Refatorar função '_validar_plano' (133 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _validar_plano(self, ...):\n#     parte1 = self.__validar_plano_parte1(...)\n#     parte2 = self.__validar_plano_parte2(...)\n#     return self.__validar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.085573",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "790cd3be3852",
      "tipo": "refatoracao",
      "alvo": "executar_plano",
      "motivo": "Função muito grande detectada: executar_plano (116 linhas)",
      "codigo": "# Refatorar função 'executar_plano' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_plano(self, ...):\n#     parte1 = self._executar_plano_parte1(...)\n#     parte2 = self._executar_plano_parte2(...)\n#     return self._executar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.087991",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "3c901dc0242c",
      "tipo": "refatoracao",
      "alvo": "_executar_onda_paralela",
      "motivo": "Função muito grande detectada: _executar_onda_paralela (149 linhas)",
      "codigo": "# Refatorar função '_executar_onda_paralela' (149 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_onda_paralela(self, ...):\n#     parte1 = self.__executar_onda_paralela_parte1(...)\n#     parte2 = self.__executar_onda_paralela_parte2(...)\n#     return self.__executar_onda_paralela_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.090205",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "08d49b85f98f",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_navegador",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_navegador (122 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_navegador' (122 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_navegador(self, ...):\n#     parte1 = self.__carregar_ferramentas_navegador_parte1(...)\n#     parte2 = self.__carregar_ferramentas_navegador_parte2(...)\n#     return self.__carregar_ferramentas_navegador_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.093437",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "5af01c7e078b",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_workspace",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_workspace (152 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_workspace' (152 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_workspace(self, ...):\n#     parte1 = self.__carregar_ferramentas_workspace_parte1(...)\n#     parte2 = self.__carregar_ferramentas_workspace_parte2(...)\n#     return self.__carregar_ferramentas_workspace_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.097053",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "c823a938cb1f",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_telemetria",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_telemetria (120 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_telemetria' (120 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_telemetria(self, ...):\n#     parte1 = self.__carregar_ferramentas_telemetria_parte1(...)\n#     parte2 = self.__carregar_ferramentas_telemetria_parte2(...)\n#     return self.__carregar_ferramentas_telemetria_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.101054",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "d9f6880ab206",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_meta",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_meta (468 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_meta' (468 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_meta(self, ...):\n#     parte1 = self.__carregar_ferramentas_meta_parte1(...)\n#     parte2 = self.__carregar_ferramentas_meta_parte2(...)\n#     return self.__carregar_ferramentas_meta_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.103676",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "74c4d16ba44c",
      "tipo": "refatoracao",
      "alvo": "executar",
      "motivo": "Função muito grande detectada: executar (138 linhas)",
      "codigo": "# Refatorar função 'executar' (138 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar(self, ...):\n#     parte1 = self._executar_parte1(...)\n#     parte2 = self._executar_parte2(...)\n#     return self._executar_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.106213",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "48cfe2f12638",
      "tipo": "refatoracao",
      "alvo": "__init__",
      "motivo": "Função muito grande detectada: __init__ (140 linhas)",
      "codigo": "# Refatorar função '__init__' (140 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def __init__(self, ...):\n#     parte1 = self.___init___parte1(...)\n#     parte2 = self.___init___parte2(...)\n#     return self.___init___final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.108640",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "85134f56663c",
      "tipo": "refatoracao",
      "alvo": "_executar_chamada_api",
      "motivo": "Função muito grande detectada: _executar_chamada_api (103 linhas)",
      "codigo": "# Refatorar função '_executar_chamada_api' (103 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_chamada_api(self, ...):\n#     parte1 = self.__executar_chamada_api_parte1(...)\n#     parte2 = self.__executar_chamada_api_parte2(...)\n#     return self.__executar_chamada_api_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.111003",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "9cb0e54e4467",
      "tipo": "refatoracao",
      "alvo": "_processar_uso_ferramentas",
      "motivo": "Função muito grande detectada: _processar_uso_ferramentas (135 linhas)",
      "codigo": "# Refatorar função '_processar_uso_ferramentas' (135 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _processar_uso_ferramentas(self, ...):\n#     parte1 = self.__processar_uso_ferramentas_parte1(...)\n#     parte2 = self.__processar_uso_ferramentas_parte2(...)\n#     return self.__processar_uso_ferramentas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.113473",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "01c1c0be34e5",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (232 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (232 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.116133",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "ae6473ff55a7",
      "tipo": "feature",
      "alvo": "linha_4556_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar correção específica",
      "codigo": "# Implementar: TODO: Implementar correção específica\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.141089",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7803d8ff405c",
      "tipo": "feature",
      "alvo": "linha_4953_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: 2. Detectar TODOs antigos",
      "codigo": "# Implementar: 2. Detectar TODOs antigos\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.143487",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "980b420dca7a",
      "tipo": "feature",
      "alvo": "linha_5010_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.146059",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "80bb5bf185b7",
      "tipo": "feature",
      "alvo": "linha_5018_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Extrair conteúdo do TODO",
      "codigo": "# Implementar: Extrair conteúdo do TODO\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.148732",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "0cdfe0a32efa",
      "tipo": "feature",
      "alvo": "linha_5028_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.",
      "codigo": "# Implementar: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:16:09.151373",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7689123009de",
      "tipo": "otimizacao",
      "alvo": "linha_5232_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.330098",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "83d1a817e7a8",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (243 linhas)",
      "codigo": "# Refatorar função 'main' (243 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.363706",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "9bfbc5c618da",
      "tipo": "refatoracao",
      "alvo": "_analisar_tarefa",
      "motivo": "Função muito grande detectada: _analisar_tarefa (105 linhas)",
      "codigo": "# Refatorar função '_analisar_tarefa' (105 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _analisar_tarefa(self, ...):\n#     parte1 = self.__analisar_tarefa_parte1(...)\n#     parte2 = self.__analisar_tarefa_parte2(...)\n#     return self.__analisar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.368274",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "9402bb78e5a5",
      "tipo": "refatoracao",
      "alvo": "_criar_estrategia",
      "motivo": "Função muito grande detectada: _criar_estrategia (101 linhas)",
      "codigo": "# Refatorar função '_criar_estrategia' (101 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _criar_estrategia(self, ...):\n#     parte1 = self.__criar_estrategia_parte1(...)\n#     parte2 = self.__criar_estrategia_parte2(...)\n#     return self.__criar_estrategia_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.372493",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7ade32de3b3c",
      "tipo": "refatoracao",
      "alvo": "_decompor_em_subtarefas",
      "motivo": "Função muito grande detectada: _decompor_em_subtarefas (116 linhas)",
      "codigo": "# Refatorar função '_decompor_em_subtarefas' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _decompor_em_subtarefas(self, ...):\n#     parte1 = self.__decompor_em_subtarefas_parte1(...)\n#     parte2 = self.__decompor_em_subtarefas_parte2(...)\n#     return self.__decompor_em_subtarefas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.377854",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "708b9171ed6a",
      "tipo": "refatoracao",
      "alvo": "_validar_plano",
      "motivo": "Função muito grande detectada: _validar_plano (133 linhas)",
      "codigo": "# Refatorar função '_validar_plano' (133 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _validar_plano(self, ...):\n#     parte1 = self.__validar_plano_parte1(...)\n#     parte2 = self.__validar_plano_parte2(...)\n#     return self.__validar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.382582",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "8f0b9a663b0b",
      "tipo": "refatoracao",
      "alvo": "executar_plano",
      "motivo": "Função muito grande detectada: executar_plano (116 linhas)",
      "codigo": "# Refatorar função 'executar_plano' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_plano(self, ...):\n#     parte1 = self._executar_plano_parte1(...)\n#     parte2 = self._executar_plano_parte2(...)\n#     return self._executar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.387878",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "9f16fa7a1428",
      "tipo": "refatoracao",
      "alvo": "_executar_onda_paralela",
      "motivo": "Função muito grande detectada: _executar_onda_paralela (149 linhas)",
      "codigo": "# Refatorar função '_executar_onda_paralela' (149 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_onda_paralela(self, ...):\n#     parte1 = self.__executar_onda_paralela_parte1(...)\n#     parte2 = self.__executar_onda_paralela_parte2(...)\n#     return self.__executar_onda_paralela_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.393056",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "fd7e69d5f0b6",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_navegador",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_navegador (122 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_navegador' (122 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_navegador(self, ...):\n#     parte1 = self.__carregar_ferramentas_navegador_parte1(...)\n#     parte2 = self.__carregar_ferramentas_navegador_parte2(...)\n#     return self.__carregar_ferramentas_navegador_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.397365",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "b77b375b994e",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_workspace",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_workspace (152 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_workspace' (152 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_workspace(self, ...):\n#     parte1 = self.__carregar_ferramentas_workspace_parte1(...)\n#     parte2 = self.__carregar_ferramentas_workspace_parte2(...)\n#     return self.__carregar_ferramentas_workspace_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.401231",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7e1272b6c3e4",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_telemetria",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_telemetria (120 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_telemetria' (120 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_telemetria(self, ...):\n#     parte1 = self.__carregar_ferramentas_telemetria_parte1(...)\n#     parte2 = self.__carregar_ferramentas_telemetria_parte2(...)\n#     return self.__carregar_ferramentas_telemetria_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.406838",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "d9dd74c7077f",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_meta",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_meta (468 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_meta' (468 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_meta(self, ...):\n#     parte1 = self.__carregar_ferramentas_meta_parte1(...)\n#     parte2 = self.__carregar_ferramentas_meta_parte2(...)\n#     return self.__carregar_ferramentas_meta_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.411459",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "0b460ade4b48",
      "tipo": "refatoracao",
      "alvo": "executar",
      "motivo": "Função muito grande detectada: executar (138 linhas)",
      "codigo": "# Refatorar função 'executar' (138 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar(self, ...):\n#     parte1 = self._executar_parte1(...)\n#     parte2 = self._executar_parte2(...)\n#     return self._executar_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.415443",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7a2b5fa35930",
      "tipo": "refatoracao",
      "alvo": "__init__",
      "motivo": "Função muito grande detectada: __init__ (141 linhas)",
      "codigo": "# Refatorar função '__init__' (141 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def __init__(self, ...):\n#     parte1 = self.___init___parte1(...)\n#     parte2 = self.___init___parte2(...)\n#     return self.___init___final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.419310",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "dfdd7e14189b",
      "tipo": "refatoracao",
      "alvo": "_executar_chamada_api",
      "motivo": "Função muito grande detectada: _executar_chamada_api (103 linhas)",
      "codigo": "# Refatorar função '_executar_chamada_api' (103 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_chamada_api(self, ...):\n#     parte1 = self.__executar_chamada_api_parte1(...)\n#     parte2 = self.__executar_chamada_api_parte2(...)\n#     return self.__executar_chamada_api_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.423472",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "9083d504a418",
      "tipo": "refatoracao",
      "alvo": "_processar_uso_ferramentas",
      "motivo": "Função muito grande detectada: _processar_uso_ferramentas (135 linhas)",
      "codigo": "# Refatorar função '_processar_uso_ferramentas' (135 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _processar_uso_ferramentas(self, ...):\n#     parte1 = self.__processar_uso_ferramentas_parte1(...)\n#     parte2 = self.__processar_uso_ferramentas_parte2(...)\n#     return self.__processar_uso_ferramentas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.428853",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7b4c0cf9eb1a",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (232 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (232 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.434198",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "a1f0fe31e969",
      "tipo": "feature",
      "alvo": "linha_4557_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar correção específica",
      "codigo": "# Implementar: TODO: Implementar correção específica\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.472029",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "b9251e79a71f",
      "tipo": "feature",
      "alvo": "linha_4954_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: 2. Detectar TODOs antigos",
      "codigo": "# Implementar: 2. Detectar TODOs antigos\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.475563",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "1b68e13e26d7",
      "tipo": "feature",
      "alvo": "linha_5011_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.479570",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "1dac8873cd9d",
      "tipo": "feature",
      "alvo": "linha_5019_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Extrair conteúdo do TODO",
      "codigo": "# Implementar: Extrair conteúdo do TODO\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.483343",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "cd62f8fdaed3",
      "tipo": "feature",
      "alvo": "linha_5029_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.",
      "codigo": "# Implementar: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T15:44:36.489381",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "cdc982e6670a",
      "tipo": "otimizacao",
      "alvo": "linha_5237_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.740805",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "86304b65fe7c",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (243 linhas)",
      "codigo": "# Refatorar função 'main' (243 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.759673",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "48b735854a9b",
      "tipo": "refatoracao",
      "alvo": "_analisar_tarefa",
      "motivo": "Função muito grande detectada: _analisar_tarefa (105 linhas)",
      "codigo": "# Refatorar função '_analisar_tarefa' (105 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _analisar_tarefa(self, ...):\n#     parte1 = self.__analisar_tarefa_parte1(...)\n#     parte2 = self.__analisar_tarefa_parte2(...)\n#     return self.__analisar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.763528",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "3ee634d688dc",
      "tipo": "refatoracao",
      "alvo": "_criar_estrategia",
      "motivo": "Função muito grande detectada: _criar_estrategia (101 linhas)",
      "codigo": "# Refatorar função '_criar_estrategia' (101 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _criar_estrategia(self, ...):\n#     parte1 = self.__criar_estrategia_parte1(...)\n#     parte2 = self.__criar_estrategia_parte2(...)\n#     return self.__criar_estrategia_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.766720",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "da63d621c3c0",
      "tipo": "refatoracao",
      "alvo": "_decompor_em_subtarefas",
      "motivo": "Função muito grande detectada: _decompor_em_subtarefas (116 linhas)",
      "codigo": "# Refatorar função '_decompor_em_subtarefas' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _decompor_em_subtarefas(self, ...):\n#     parte1 = self.__decompor_em_subtarefas_parte1(...)\n#     parte2 = self.__decompor_em_subtarefas_parte2(...)\n#     return self.__decompor_em_subtarefas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.770091",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "bd24d3aa1c79",
      "tipo": "refatoracao",
      "alvo": "_validar_plano",
      "motivo": "Função muito grande detectada: _validar_plano (133 linhas)",
      "codigo": "# Refatorar função '_validar_plano' (133 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _validar_plano(self, ...):\n#     parte1 = self.__validar_plano_parte1(...)\n#     parte2 = self.__validar_plano_parte2(...)\n#     return self.__validar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.773080",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "711731226807",
      "tipo": "refatoracao",
      "alvo": "executar_plano",
      "motivo": "Função muito grande detectada: executar_plano (116 linhas)",
      "codigo": "# Refatorar função 'executar_plano' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_plano(self, ...):\n#     parte1 = self._executar_plano_parte1(...)\n#     parte2 = self._executar_plano_parte2(...)\n#     return self._executar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.776385",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "f0116de87991",
      "tipo": "refatoracao",
      "alvo": "_executar_onda_paralela",
      "motivo": "Função muito grande detectada: _executar_onda_paralela (151 linhas)",
      "codigo": "# Refatorar função '_executar_onda_paralela' (151 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_onda_paralela(self, ...):\n#     parte1 = self.__executar_onda_paralela_parte1(...)\n#     parte2 = self.__executar_onda_paralela_parte2(...)\n#     return self.__executar_onda_paralela_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.779518",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "68ae1f898fa7",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_navegador",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_navegador (122 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_navegador' (122 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_navegador(self, ...):\n#     parte1 = self.__carregar_ferramentas_navegador_parte1(...)\n#     parte2 = self.__carregar_ferramentas_navegador_parte2(...)\n#     return self.__carregar_ferramentas_navegador_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.783133",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "5c73c8e454b2",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_workspace",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_workspace (152 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_workspace' (152 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_workspace(self, ...):\n#     parte1 = self.__carregar_ferramentas_workspace_parte1(...)\n#     parte2 = self.__carregar_ferramentas_workspace_parte2(...)\n#     return self.__carregar_ferramentas_workspace_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.786744",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "201128453657",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_telemetria",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_telemetria (120 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_telemetria' (120 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_telemetria(self, ...):\n#     parte1 = self.__carregar_ferramentas_telemetria_parte1(...)\n#     parte2 = self.__carregar_ferramentas_telemetria_parte2(...)\n#     return self.__carregar_ferramentas_telemetria_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.790587",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "13a5e13b8f49",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_meta",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_meta (468 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_meta' (468 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_meta(self, ...):\n#     parte1 = self.__carregar_ferramentas_meta_parte1(...)\n#     parte2 = self.__carregar_ferramentas_meta_parte2(...)\n#     return self.__carregar_ferramentas_meta_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.793770",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "9511fd083c03",
      "tipo": "refatoracao",
      "alvo": "executar",
      "motivo": "Função muito grande detectada: executar (138 linhas)",
      "codigo": "# Refatorar função 'executar' (138 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar(self, ...):\n#     parte1 = self._executar_parte1(...)\n#     parte2 = self._executar_parte2(...)\n#     return self._executar_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.797089",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "ff1fc0acf093",
      "tipo": "refatoracao",
      "alvo": "__init__",
      "motivo": "Função muito grande detectada: __init__ (142 linhas)",
      "codigo": "# Refatorar função '__init__' (142 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def __init__(self, ...):\n#     parte1 = self.___init___parte1(...)\n#     parte2 = self.___init___parte2(...)\n#     return self.___init___final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.800258",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "259457d4f5f9",
      "tipo": "refatoracao",
      "alvo": "_executar_chamada_api",
      "motivo": "Função muito grande detectada: _executar_chamada_api (103 linhas)",
      "codigo": "# Refatorar função '_executar_chamada_api' (103 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_chamada_api(self, ...):\n#     parte1 = self.__executar_chamada_api_parte1(...)\n#     parte2 = self.__executar_chamada_api_parte2(...)\n#     return self.__executar_chamada_api_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.803363",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "db107b0cb4b4",
      "tipo": "refatoracao",
      "alvo": "_processar_uso_ferramentas",
      "motivo": "Função muito grande detectada: _processar_uso_ferramentas (135 linhas)",
      "codigo": "# Refatorar função '_processar_uso_ferramentas' (135 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _processar_uso_ferramentas(self, ...):\n#     parte1 = self.__processar_uso_ferramentas_parte1(...)\n#     parte2 = self.__processar_uso_ferramentas_parte2(...)\n#     return self.__processar_uso_ferramentas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.806425",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "13e9f46843fb",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (237 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (237 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.809574",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "8081ff5b36d7",
      "tipo": "feature",
      "alvo": "linha_4562_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar correção específica",
      "codigo": "# Implementar: TODO: Implementar correção específica\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.837658",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "d97d1794545d",
      "tipo": "feature",
      "alvo": "linha_4959_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: 2. Detectar TODOs antigos",
      "codigo": "# Implementar: 2. Detectar TODOs antigos\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.840842",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7432c223be0b",
      "tipo": "feature",
      "alvo": "linha_5016_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.844022",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "57b6beec6ab6",
      "tipo": "feature",
      "alvo": "linha_5024_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Extrair conteúdo do TODO",
      "codigo": "# Implementar: Extrair conteúdo do TODO\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.847404",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "8bb20faf9e1a",
      "tipo": "feature",
      "alvo": "linha_5034_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.",
      "codigo": "# Implementar: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T16:04:56.851454",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "3556afe4c045",
      "tipo": "otimizacao",
      "alvo": "linha_5267_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.102021",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "5e46f269cba7",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (243 linhas)",
      "codigo": "# Refatorar função 'main' (243 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.120254",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "feb281d9e308",
      "tipo": "refatoracao",
      "alvo": "_analisar_tarefa",
      "motivo": "Função muito grande detectada: _analisar_tarefa (105 linhas)",
      "codigo": "# Refatorar função '_analisar_tarefa' (105 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _analisar_tarefa(self, ...):\n#     parte1 = self.__analisar_tarefa_parte1(...)\n#     parte2 = self.__analisar_tarefa_parte2(...)\n#     return self.__analisar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.123928",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "4f23b2de8c62",
      "tipo": "refatoracao",
      "alvo": "_criar_estrategia",
      "motivo": "Função muito grande detectada: _criar_estrategia (101 linhas)",
      "codigo": "# Refatorar função '_criar_estrategia' (101 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _criar_estrategia(self, ...):\n#     parte1 = self.__criar_estrategia_parte1(...)\n#     parte2 = self.__criar_estrategia_parte2(...)\n#     return self.__criar_estrategia_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.127396",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "a5c21209f3d6",
      "tipo": "refatoracao",
      "alvo": "_decompor_em_subtarefas",
      "motivo": "Função muito grande detectada: _decompor_em_subtarefas (116 linhas)",
      "codigo": "# Refatorar função '_decompor_em_subtarefas' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _decompor_em_subtarefas(self, ...):\n#     parte1 = self.__decompor_em_subtarefas_parte1(...)\n#     parte2 = self.__decompor_em_subtarefas_parte2(...)\n#     return self.__decompor_em_subtarefas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.130748",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "cb174d144552",
      "tipo": "refatoracao",
      "alvo": "_validar_plano",
      "motivo": "Função muito grande detectada: _validar_plano (133 linhas)",
      "codigo": "# Refatorar função '_validar_plano' (133 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _validar_plano(self, ...):\n#     parte1 = self.__validar_plano_parte1(...)\n#     parte2 = self.__validar_plano_parte2(...)\n#     return self.__validar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.134096",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "2e513f4a54cf",
      "tipo": "refatoracao",
      "alvo": "executar_plano",
      "motivo": "Função muito grande detectada: executar_plano (116 linhas)",
      "codigo": "# Refatorar função 'executar_plano' (116 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_plano(self, ...):\n#     parte1 = self._executar_plano_parte1(...)\n#     parte2 = self._executar_plano_parte2(...)\n#     return self._executar_plano_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.137426",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7e9fc3cbdf80",
      "tipo": "refatoracao",
      "alvo": "_executar_onda_paralela",
      "motivo": "Função muito grande detectada: _executar_onda_paralela (151 linhas)",
      "codigo": "# Refatorar função '_executar_onda_paralela' (151 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_onda_paralela(self, ...):\n#     parte1 = self.__executar_onda_paralela_parte1(...)\n#     parte2 = self.__executar_onda_paralela_parte2(...)\n#     return self.__executar_onda_paralela_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.141093",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "8067e35ef641",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_navegador",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_navegador (122 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_navegador' (122 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_navegador(self, ...):\n#     parte1 = self.__carregar_ferramentas_navegador_parte1(...)\n#     parte2 = self.__carregar_ferramentas_navegador_parte2(...)\n#     return self.__carregar_ferramentas_navegador_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.144616",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "0570f1a0e5a2",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_workspace",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_workspace (152 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_workspace' (152 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_workspace(self, ...):\n#     parte1 = self.__carregar_ferramentas_workspace_parte1(...)\n#     parte2 = self.__carregar_ferramentas_workspace_parte2(...)\n#     return self.__carregar_ferramentas_workspace_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.147976",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "e5c4aa6cba33",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_telemetria",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_telemetria (120 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_telemetria' (120 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_telemetria(self, ...):\n#     parte1 = self.__carregar_ferramentas_telemetria_parte1(...)\n#     parte2 = self.__carregar_ferramentas_telemetria_parte2(...)\n#     return self.__carregar_ferramentas_telemetria_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.151366",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "4281f38de302",
      "tipo": "refatoracao",
      "alvo": "_carregar_ferramentas_meta",
      "motivo": "Função muito grande detectada: _carregar_ferramentas_meta (468 linhas)",
      "codigo": "# Refatorar função '_carregar_ferramentas_meta' (468 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _carregar_ferramentas_meta(self, ...):\n#     parte1 = self.__carregar_ferramentas_meta_parte1(...)\n#     parte2 = self.__carregar_ferramentas_meta_parte2(...)\n#     return self.__carregar_ferramentas_meta_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.154800",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "f724d51c82ab",
      "tipo": "refatoracao",
      "alvo": "executar",
      "motivo": "Função muito grande detectada: executar (138 linhas)",
      "codigo": "# Refatorar função 'executar' (138 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar(self, ...):\n#     parte1 = self._executar_parte1(...)\n#     parte2 = self._executar_parte2(...)\n#     return self._executar_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.158525",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "d57200c0810c",
      "tipo": "refatoracao",
      "alvo": "__init__",
      "motivo": "Função muito grande detectada: __init__ (142 linhas)",
      "codigo": "# Refatorar função '__init__' (142 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def __init__(self, ...):\n#     parte1 = self.___init___parte1(...)\n#     parte2 = self.___init___parte2(...)\n#     return self.___init___final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.162054",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "d7d90ccdee0b",
      "tipo": "refatoracao",
      "alvo": "_executar_chamada_api",
      "motivo": "Função muito grande detectada: _executar_chamada_api (103 linhas)",
      "codigo": "# Refatorar função '_executar_chamada_api' (103 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _executar_chamada_api(self, ...):\n#     parte1 = self.__executar_chamada_api_parte1(...)\n#     parte2 = self.__executar_chamada_api_parte2(...)\n#     return self.__executar_chamada_api_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.165583",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "adeed8dfd9c5",
      "tipo": "refatoracao",
      "alvo": "_processar_uso_ferramentas",
      "motivo": "Função muito grande detectada: _processar_uso_ferramentas (135 linhas)",
      "codigo": "# Refatorar função '_processar_uso_ferramentas' (135 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def _processar_uso_ferramentas(self, ...):\n#     parte1 = self.__processar_uso_ferramentas_parte1(...)\n#     parte2 = self.__processar_uso_ferramentas_parte2(...)\n#     return self.__processar_uso_ferramentas_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.169050",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "2d5ec1be3620",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (310 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (310 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.172742",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "95142e9063f7",
      "tipo": "feature",
      "alvo": "linha_4592_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar correção específica",
      "codigo": "# Implementar: TODO: Implementar correção específica\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.201483",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "bb7cebbc39b8",
      "tipo": "feature",
      "alvo": "linha_4989_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: 2. Detectar TODOs antigos",
      "codigo": "# Implementar: 2. Detectar TODOs antigos\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.205221",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "1287256fae81",
      "tipo": "feature",
      "alvo": "linha_5046_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.208880",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "e35c4d9174d1",
      "tipo": "feature",
      "alvo": "linha_5054_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Extrair conteúdo do TODO",
      "codigo": "# Implementar: Extrair conteúdo do TODO\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.212502",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "1d9d35853d2f",
      "tipo": "feature",
      "alvo": "linha_5064_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.",
      "codigo": "# Implementar: Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:33:46.216099",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "78e2109c76c5",
      "tipo": "otimizacao",
      "alvo": "linha_2562_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:46:10.344047",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "d88b9462a789",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (144 linhas)",
      "codigo": "# Refatorar função 'main' (144 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:46:10.363853",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "e72dfc60d3ab",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (195 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (195 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:46:10.368405",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "74bf1eb3d96a",
      "tipo": "feature",
      "alvo": "linha_2437_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T17:46:10.395817",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "5353aaeedeeb",
      "tipo": "otimizacao",
      "alvo": "linha_2569_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T18:03:46.527971",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "2d8b5893e712",
      "tipo": "otimizacao",
      "alvo": "linha_496_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: re",
      "codigo": "# Mover imports para o topo do arquivo:\n# import re\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T18:03:46.547446",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "1d2e4c0a1ba0",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (144 linhas)",
      "codigo": "# Refatorar função 'main' (144 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T18:03:46.551983",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "be20f7a139df",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (195 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (195 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T18:03:46.556368",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "9b2ab93c3eab",
      "tipo": "feature",
      "alvo": "linha_2444_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T18:03:46.585801",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "a479e66359c9",
      "tipo": "otimizacao",
      "alvo": "linha_2564_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T18:19:13.357614",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "e2e9d422b93a",
      "tipo": "otimizacao",
      "alvo": "linha_492_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: re",
      "codigo": "# Mover imports para o topo do arquivo:\n# import re\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T18:19:13.378047",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "897f069298b5",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (144 linhas)",
      "codigo": "# Refatorar função 'main' (144 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T18:19:13.383012",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "51a108b98b37",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (195 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (195 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T18:19:13.388013",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "a8d2879e10cd",
      "tipo": "feature",
      "alvo": "linha_2439_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T18:19:13.418382",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "c9be157aa4d0",
      "tipo": "otimizacao",
      "alvo": "linha_2576_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T19:01:17.777491",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "7b2f419caf6a",
      "tipo": "otimizacao",
      "alvo": "linha_492_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: re",
      "codigo": "# Mover imports para o topo do arquivo:\n# import re\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T19:01:17.798964",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "65f1fd3c70e5",
      "tipo": "otimizacao",
      "alvo": "linha_501_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: json_repair",
      "codigo": "# Mover imports para o topo do arquivo:\n# import json_repair\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T19:01:17.803799",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "1bdd7a48cf34",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (144 linhas)",
      "codigo": "# Refatorar função 'main' (144 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T19:01:17.808398",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "5f832dcae7bf",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (195 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (195 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T19:01:17.813524",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7add04ee81ba",
      "tipo": "feature",
      "alvo": "linha_2451_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T19:01:17.842962",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7246871e779f",
      "tipo": "otimizacao",
      "alvo": "linha_2576_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T20:33:29.732360",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "b97f8c201391",
      "tipo": "otimizacao",
      "alvo": "linha_492_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: re",
      "codigo": "# Mover imports para o topo do arquivo:\n# import re\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T20:33:29.754663",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "fc5718139196",
      "tipo": "otimizacao",
      "alvo": "linha_501_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: json_repair",
      "codigo": "# Mover imports para o topo do arquivo:\n# import json_repair\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T20:33:29.760100",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "d2c5d0580d44",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (144 linhas)",
      "codigo": "# Refatorar função 'main' (144 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T20:33:29.765337",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "20b16d115224",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (195 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (195 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T20:33:29.771272",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "9e2329a63100",
      "tipo": "feature",
      "alvo": "linha_2451_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T20:33:29.803081",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "ee55f95dffb8",
      "tipo": "otimizacao",
      "alvo": "linha_2590_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:20:51.170236",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "5d68c45fc4a7",
      "tipo": "otimizacao",
      "alvo": "linha_502_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: re",
      "codigo": "# Mover imports para o topo do arquivo:\n# import re\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:20:51.193020",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "dc8810d9c8e0",
      "tipo": "otimizacao",
      "alvo": "linha_511_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: json_repair",
      "codigo": "# Mover imports para o topo do arquivo:\n# import json_repair\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:20:51.199234",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "d1cae35da68d",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (144 linhas)",
      "codigo": "# Refatorar função 'main' (144 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:20:51.206022",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "764f9da0e211",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (233 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (233 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:20:51.212073",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "dd8b214a7a40",
      "tipo": "feature",
      "alvo": "linha_2465_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:20:51.247633",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "bdd5beba237a",
      "tipo": "otimizacao",
      "alvo": "linha_2582_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:22:05.122195",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "f9f8c6e418ef",
      "tipo": "otimizacao",
      "alvo": "linha_496_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: re",
      "codigo": "# Mover imports para o topo do arquivo:\n# import re\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:22:05.144115",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "92188e19f458",
      "tipo": "otimizacao",
      "alvo": "linha_505_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: json_repair",
      "codigo": "# Mover imports para o topo do arquivo:\n# import json_repair\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:22:05.149896",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "ad6ad481c19e",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (144 linhas)",
      "codigo": "# Refatorar função 'main' (144 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:22:05.155465",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "cb274e82b87f",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (220 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (220 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:22:05.161404",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "f68bf070c9aa",
      "tipo": "feature",
      "alvo": "linha_2457_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T21:22:05.195118",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "7bf301b64e2e",
      "tipo": "otimizacao",
      "alvo": "linha_2605_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Loop ineficiente detectado: 'texto +=' em loop (O(n²))",
      "codigo": "# Substituir:\n# texto += algo\n\n# Por:\nlista = []\nfor item in items:\n    lista.append(algo)\ntexto = ''.join(lista)  # O(n) em vez de O(n²)\n",
      "prioridade": 7,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T22:14:46.556897",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém template de sugestão (# Substituir/Por)"
    },
    {
      "id": "729bdc888d3c",
      "tipo": "otimizacao",
      "alvo": "linha_496_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: re",
      "codigo": "# Mover imports para o topo do arquivo:\n# import re\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T22:14:46.579163",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "142dc48ea581",
      "tipo": "otimizacao",
      "alvo": "linha_505_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "Import dentro de loop detectado: json_repair",
      "codigo": "# Mover imports para o topo do arquivo:\n# import json_repair\n\n# Motivo: Imports dentro de loops causam overhead desnecessário\n",
      "prioridade": 6,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T22:14:46.585591",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "fb1c34f186ee",
      "tipo": "refatoracao",
      "alvo": "main",
      "motivo": "Função muito grande detectada: main (144 linhas)",
      "codigo": "# Refatorar função 'main' (144 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def main(self, ...):\n#     parte1 = self._main_parte1(...)\n#     parte2 = self._main_parte2(...)\n#     return self._main_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T22:14:46.591714",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "1b8d80d67fe5",
      "tipo": "refatoracao",
      "alvo": "executar_tarefa",
      "motivo": "Função muito grande detectada: executar_tarefa (220 linhas)",
      "codigo": "# Refatorar função 'executar_tarefa' (220 linhas)\n#\n# Sugestões:\n# 1. Identificar blocos lógicos distintos\n# 2. Extrair em métodos auxiliares privados (_metodo_auxiliar)\n# 3. Manter método principal com <= 50 linhas\n#\n# Exemplo:\n# def executar_tarefa(self, ...):\n#     parte1 = self._executar_tarefa_parte1(...)\n#     parte2 = self._executar_tarefa_parte2(...)\n#     return self._executar_tarefa_final(parte1, parte2)\n",
      "prioridade": 5,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T22:14:46.597924",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    },
    {
      "id": "21ae52c4787f",
      "tipo": "feature",
      "alvo": "linha_2480_C:\\Projetos Automações e Digitais\\Luna\\luna_v3_FINAL_OTIMIZADA.py",
      "motivo": "TODO detectado: TODO: Implementar validação",
      "codigo": "# Implementar: TODO: Implementar validação\n#\n# Esta tarefa foi convertida de comentário TODO para melhoria rastreável.\n# Refine a implementação conforme necessário.\n",
      "prioridade": 4,
      "nivel_risco": "RISKY",
      "detectado_em": "2025-10-23T22:14:46.633074",
      "status": "pendente",
      "nao_aplicavel_motivo": "Contém apenas comentários, sem código executável"
    }
  ],
  "total": 198,
  "criado_em": "2025-10-24T00:15:15.113515",
  "descricao": "Melhorias que contêm sugestões/templates e precisam de conversão manual para código executável"
}